/*! For license information please see index.js.LICENSE.txt */
(()=>{var e={4007:e=>{"use strict";e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},2550:e=>{"use strict";e.exports=JSON.parse('{"100":"💯","1234":"🔢","grinning":"😀","smiley":"😃","smile":"😄","grin":"😁","laughing":"😆","satisfied":"😆","sweat_smile":"😅","rofl":"🤣","joy":"😂","slightly_smiling_face":"🙂","upside_down_face":"🙃","wink":"😉","blush":"😊","innocent":"😇","smiling_face_with_three_hearts":"🥰","heart_eyes":"😍","star_struck":"🤩","kissing_heart":"😘","kissing":"😗","relaxed":"☺️","kissing_closed_eyes":"😚","kissing_smiling_eyes":"😙","smiling_face_with_tear":"🥲","yum":"😋","stuck_out_tongue":"😛","stuck_out_tongue_winking_eye":"😜","zany_face":"🤪","stuck_out_tongue_closed_eyes":"😝","money_mouth_face":"🤑","hugs":"🤗","hand_over_mouth":"🤭","shushing_face":"🤫","thinking":"🤔","zipper_mouth_face":"🤐","raised_eyebrow":"🤨","neutral_face":"😐","expressionless":"😑","no_mouth":"😶","smirk":"😏","unamused":"😒","roll_eyes":"🙄","grimacing":"😬","lying_face":"🤥","relieved":"😌","pensive":"😔","sleepy":"😪","drooling_face":"🤤","sleeping":"😴","mask":"😷","face_with_thermometer":"🤒","face_with_head_bandage":"🤕","nauseated_face":"🤢","vomiting_face":"🤮","sneezing_face":"🤧","hot_face":"🥵","cold_face":"🥶","woozy_face":"🥴","dizzy_face":"😵","exploding_head":"🤯","cowboy_hat_face":"🤠","partying_face":"🥳","disguised_face":"🥸","sunglasses":"😎","nerd_face":"🤓","monocle_face":"🧐","confused":"😕","worried":"😟","slightly_frowning_face":"🙁","frowning_face":"☹️","open_mouth":"😮","hushed":"😯","astonished":"😲","flushed":"😳","pleading_face":"🥺","frowning":"😦","anguished":"😧","fearful":"😨","cold_sweat":"😰","disappointed_relieved":"😥","cry":"😢","sob":"😭","scream":"😱","confounded":"😖","persevere":"😣","disappointed":"😞","sweat":"😓","weary":"😩","tired_face":"😫","yawning_face":"🥱","triumph":"😤","rage":"😡","pout":"😡","angry":"😠","cursing_face":"🤬","smiling_imp":"😈","imp":"👿","skull":"💀","skull_and_crossbones":"☠️","hankey":"💩","poop":"💩","shit":"💩","clown_face":"🤡","japanese_ogre":"👹","japanese_goblin":"👺","ghost":"👻","alien":"👽","space_invader":"👾","robot":"🤖","smiley_cat":"😺","smile_cat":"😸","joy_cat":"😹","heart_eyes_cat":"😻","smirk_cat":"😼","kissing_cat":"😽","scream_cat":"🙀","crying_cat_face":"😿","pouting_cat":"😾","see_no_evil":"🙈","hear_no_evil":"🙉","speak_no_evil":"🙊","kiss":"💋","love_letter":"💌","cupid":"💘","gift_heart":"💝","sparkling_heart":"💖","heartpulse":"💗","heartbeat":"💓","revolving_hearts":"💞","two_hearts":"💕","heart_decoration":"💟","heavy_heart_exclamation":"❣️","broken_heart":"💔","heart":"❤️","orange_heart":"🧡","yellow_heart":"💛","green_heart":"💚","blue_heart":"💙","purple_heart":"💜","brown_heart":"🤎","black_heart":"🖤","white_heart":"🤍","anger":"💢","boom":"💥","collision":"💥","dizzy":"💫","sweat_drops":"💦","dash":"💨","hole":"🕳️","bomb":"💣","speech_balloon":"💬","eye_speech_bubble":"👁️‍🗨️","left_speech_bubble":"🗨️","right_anger_bubble":"🗯️","thought_balloon":"💭","zzz":"💤","wave":"👋","raised_back_of_hand":"🤚","raised_hand_with_fingers_splayed":"🖐️","hand":"✋","raised_hand":"✋","vulcan_salute":"🖖","ok_hand":"👌","pinched_fingers":"🤌","pinching_hand":"🤏","v":"✌️","crossed_fingers":"🤞","love_you_gesture":"🤟","metal":"🤘","call_me_hand":"🤙","point_left":"👈","point_right":"👉","point_up_2":"👆","middle_finger":"🖕","fu":"🖕","point_down":"👇","point_up":"☝️","+1":"👍","thumbsup":"👍","-1":"👎","thumbsdown":"👎","fist_raised":"✊","fist":"✊","fist_oncoming":"👊","facepunch":"👊","punch":"👊","fist_left":"🤛","fist_right":"🤜","clap":"👏","raised_hands":"🙌","open_hands":"👐","palms_up_together":"🤲","handshake":"🤝","pray":"🙏","writing_hand":"✍️","nail_care":"💅","selfie":"🤳","muscle":"💪","mechanical_arm":"🦾","mechanical_leg":"🦿","leg":"🦵","foot":"🦶","ear":"👂","ear_with_hearing_aid":"🦻","nose":"👃","brain":"🧠","anatomical_heart":"🫀","lungs":"🫁","tooth":"🦷","bone":"🦴","eyes":"👀","eye":"👁️","tongue":"👅","lips":"👄","baby":"👶","child":"🧒","boy":"👦","girl":"👧","adult":"🧑","blond_haired_person":"👱","man":"👨","bearded_person":"🧔","red_haired_man":"👨‍🦰","curly_haired_man":"👨‍🦱","white_haired_man":"👨‍🦳","bald_man":"👨‍🦲","woman":"👩","red_haired_woman":"👩‍🦰","person_red_hair":"🧑‍🦰","curly_haired_woman":"👩‍🦱","person_curly_hair":"🧑‍🦱","white_haired_woman":"👩‍🦳","person_white_hair":"🧑‍🦳","bald_woman":"👩‍🦲","person_bald":"🧑‍🦲","blond_haired_woman":"👱‍♀️","blonde_woman":"👱‍♀️","blond_haired_man":"👱‍♂️","older_adult":"🧓","older_man":"👴","older_woman":"👵","frowning_person":"🙍","frowning_man":"🙍‍♂️","frowning_woman":"🙍‍♀️","pouting_face":"🙎","pouting_man":"🙎‍♂️","pouting_woman":"🙎‍♀️","no_good":"🙅","no_good_man":"🙅‍♂️","ng_man":"🙅‍♂️","no_good_woman":"🙅‍♀️","ng_woman":"🙅‍♀️","ok_person":"🙆","ok_man":"🙆‍♂️","ok_woman":"🙆‍♀️","tipping_hand_person":"💁","information_desk_person":"💁","tipping_hand_man":"💁‍♂️","sassy_man":"💁‍♂️","tipping_hand_woman":"💁‍♀️","sassy_woman":"💁‍♀️","raising_hand":"🙋","raising_hand_man":"🙋‍♂️","raising_hand_woman":"🙋‍♀️","deaf_person":"🧏","deaf_man":"🧏‍♂️","deaf_woman":"🧏‍♀️","bow":"🙇","bowing_man":"🙇‍♂️","bowing_woman":"🙇‍♀️","facepalm":"🤦","man_facepalming":"🤦‍♂️","woman_facepalming":"🤦‍♀️","shrug":"🤷","man_shrugging":"🤷‍♂️","woman_shrugging":"🤷‍♀️","health_worker":"🧑‍⚕️","man_health_worker":"👨‍⚕️","woman_health_worker":"👩‍⚕️","student":"🧑‍🎓","man_student":"👨‍🎓","woman_student":"👩‍🎓","teacher":"🧑‍🏫","man_teacher":"👨‍🏫","woman_teacher":"👩‍🏫","judge":"🧑‍⚖️","man_judge":"👨‍⚖️","woman_judge":"👩‍⚖️","farmer":"🧑‍🌾","man_farmer":"👨‍🌾","woman_farmer":"👩‍🌾","cook":"🧑‍🍳","man_cook":"👨‍🍳","woman_cook":"👩‍🍳","mechanic":"🧑‍🔧","man_mechanic":"👨‍🔧","woman_mechanic":"👩‍🔧","factory_worker":"🧑‍🏭","man_factory_worker":"👨‍🏭","woman_factory_worker":"👩‍🏭","office_worker":"🧑‍💼","man_office_worker":"👨‍💼","woman_office_worker":"👩‍💼","scientist":"🧑‍🔬","man_scientist":"👨‍🔬","woman_scientist":"👩‍🔬","technologist":"🧑‍💻","man_technologist":"👨‍💻","woman_technologist":"👩‍💻","singer":"🧑‍🎤","man_singer":"👨‍🎤","woman_singer":"👩‍🎤","artist":"🧑‍🎨","man_artist":"👨‍🎨","woman_artist":"👩‍🎨","pilot":"🧑‍✈️","man_pilot":"👨‍✈️","woman_pilot":"👩‍✈️","astronaut":"🧑‍🚀","man_astronaut":"👨‍🚀","woman_astronaut":"👩‍🚀","firefighter":"🧑‍🚒","man_firefighter":"👨‍🚒","woman_firefighter":"👩‍🚒","police_officer":"👮","cop":"👮","policeman":"👮‍♂️","policewoman":"👮‍♀️","detective":"🕵️","male_detective":"🕵️‍♂️","female_detective":"🕵️‍♀️","guard":"💂","guardsman":"💂‍♂️","guardswoman":"💂‍♀️","ninja":"🥷","construction_worker":"👷","construction_worker_man":"👷‍♂️","construction_worker_woman":"👷‍♀️","prince":"🤴","princess":"👸","person_with_turban":"👳","man_with_turban":"👳‍♂️","woman_with_turban":"👳‍♀️","man_with_gua_pi_mao":"👲","woman_with_headscarf":"🧕","person_in_tuxedo":"🤵","man_in_tuxedo":"🤵‍♂️","woman_in_tuxedo":"🤵‍♀️","person_with_veil":"👰","man_with_veil":"👰‍♂️","woman_with_veil":"👰‍♀️","bride_with_veil":"👰‍♀️","pregnant_woman":"🤰","breast_feeding":"🤱","woman_feeding_baby":"👩‍🍼","man_feeding_baby":"👨‍🍼","person_feeding_baby":"🧑‍🍼","angel":"👼","santa":"🎅","mrs_claus":"🤶","mx_claus":"🧑‍🎄","superhero":"🦸","superhero_man":"🦸‍♂️","superhero_woman":"🦸‍♀️","supervillain":"🦹","supervillain_man":"🦹‍♂️","supervillain_woman":"🦹‍♀️","mage":"🧙","mage_man":"🧙‍♂️","mage_woman":"🧙‍♀️","fairy":"🧚","fairy_man":"🧚‍♂️","fairy_woman":"🧚‍♀️","vampire":"🧛","vampire_man":"🧛‍♂️","vampire_woman":"🧛‍♀️","merperson":"🧜","merman":"🧜‍♂️","mermaid":"🧜‍♀️","elf":"🧝","elf_man":"🧝‍♂️","elf_woman":"🧝‍♀️","genie":"🧞","genie_man":"🧞‍♂️","genie_woman":"🧞‍♀️","zombie":"🧟","zombie_man":"🧟‍♂️","zombie_woman":"🧟‍♀️","massage":"💆","massage_man":"💆‍♂️","massage_woman":"💆‍♀️","haircut":"💇","haircut_man":"💇‍♂️","haircut_woman":"💇‍♀️","walking":"🚶","walking_man":"🚶‍♂️","walking_woman":"🚶‍♀️","standing_person":"🧍","standing_man":"🧍‍♂️","standing_woman":"🧍‍♀️","kneeling_person":"🧎","kneeling_man":"🧎‍♂️","kneeling_woman":"🧎‍♀️","person_with_probing_cane":"🧑‍🦯","man_with_probing_cane":"👨‍🦯","woman_with_probing_cane":"👩‍🦯","person_in_motorized_wheelchair":"🧑‍🦼","man_in_motorized_wheelchair":"👨‍🦼","woman_in_motorized_wheelchair":"👩‍🦼","person_in_manual_wheelchair":"🧑‍🦽","man_in_manual_wheelchair":"👨‍🦽","woman_in_manual_wheelchair":"👩‍🦽","runner":"🏃","running":"🏃","running_man":"🏃‍♂️","running_woman":"🏃‍♀️","woman_dancing":"💃","dancer":"💃","man_dancing":"🕺","business_suit_levitating":"🕴️","dancers":"👯","dancing_men":"👯‍♂️","dancing_women":"👯‍♀️","sauna_person":"🧖","sauna_man":"🧖‍♂️","sauna_woman":"🧖‍♀️","climbing":"🧗","climbing_man":"🧗‍♂️","climbing_woman":"🧗‍♀️","person_fencing":"🤺","horse_racing":"🏇","skier":"⛷️","snowboarder":"🏂","golfing":"🏌️","golfing_man":"🏌️‍♂️","golfing_woman":"🏌️‍♀️","surfer":"🏄","surfing_man":"🏄‍♂️","surfing_woman":"🏄‍♀️","rowboat":"🚣","rowing_man":"🚣‍♂️","rowing_woman":"🚣‍♀️","swimmer":"🏊","swimming_man":"🏊‍♂️","swimming_woman":"🏊‍♀️","bouncing_ball_person":"⛹️","bouncing_ball_man":"⛹️‍♂️","basketball_man":"⛹️‍♂️","bouncing_ball_woman":"⛹️‍♀️","basketball_woman":"⛹️‍♀️","weight_lifting":"🏋️","weight_lifting_man":"🏋️‍♂️","weight_lifting_woman":"🏋️‍♀️","bicyclist":"🚴","biking_man":"🚴‍♂️","biking_woman":"🚴‍♀️","mountain_bicyclist":"🚵","mountain_biking_man":"🚵‍♂️","mountain_biking_woman":"🚵‍♀️","cartwheeling":"🤸","man_cartwheeling":"🤸‍♂️","woman_cartwheeling":"🤸‍♀️","wrestling":"🤼","men_wrestling":"🤼‍♂️","women_wrestling":"🤼‍♀️","water_polo":"🤽","man_playing_water_polo":"🤽‍♂️","woman_playing_water_polo":"🤽‍♀️","handball_person":"🤾","man_playing_handball":"🤾‍♂️","woman_playing_handball":"🤾‍♀️","juggling_person":"🤹","man_juggling":"🤹‍♂️","woman_juggling":"🤹‍♀️","lotus_position":"🧘","lotus_position_man":"🧘‍♂️","lotus_position_woman":"🧘‍♀️","bath":"🛀","sleeping_bed":"🛌","people_holding_hands":"🧑‍🤝‍🧑","two_women_holding_hands":"👭","couple":"👫","two_men_holding_hands":"👬","couplekiss":"💏","couplekiss_man_woman":"👩‍❤️‍💋‍👨","couplekiss_man_man":"👨‍❤️‍💋‍👨","couplekiss_woman_woman":"👩‍❤️‍💋‍👩","couple_with_heart":"💑","couple_with_heart_woman_man":"👩‍❤️‍👨","couple_with_heart_man_man":"👨‍❤️‍👨","couple_with_heart_woman_woman":"👩‍❤️‍👩","family":"👪","family_man_woman_boy":"👨‍👩‍👦","family_man_woman_girl":"👨‍👩‍👧","family_man_woman_girl_boy":"👨‍👩‍👧‍👦","family_man_woman_boy_boy":"👨‍👩‍👦‍👦","family_man_woman_girl_girl":"👨‍👩‍👧‍👧","family_man_man_boy":"👨‍👨‍👦","family_man_man_girl":"👨‍👨‍👧","family_man_man_girl_boy":"👨‍👨‍👧‍👦","family_man_man_boy_boy":"👨‍👨‍👦‍👦","family_man_man_girl_girl":"👨‍👨‍👧‍👧","family_woman_woman_boy":"👩‍👩‍👦","family_woman_woman_girl":"👩‍👩‍👧","family_woman_woman_girl_boy":"👩‍👩‍👧‍👦","family_woman_woman_boy_boy":"👩‍👩‍👦‍👦","family_woman_woman_girl_girl":"👩‍👩‍👧‍👧","family_man_boy":"👨‍👦","family_man_boy_boy":"👨‍👦‍👦","family_man_girl":"👨‍👧","family_man_girl_boy":"👨‍👧‍👦","family_man_girl_girl":"👨‍👧‍👧","family_woman_boy":"👩‍👦","family_woman_boy_boy":"👩‍👦‍👦","family_woman_girl":"👩‍👧","family_woman_girl_boy":"👩‍👧‍👦","family_woman_girl_girl":"👩‍👧‍👧","speaking_head":"🗣️","bust_in_silhouette":"👤","busts_in_silhouette":"👥","people_hugging":"🫂","footprints":"👣","monkey_face":"🐵","monkey":"🐒","gorilla":"🦍","orangutan":"🦧","dog":"🐶","dog2":"🐕","guide_dog":"🦮","service_dog":"🐕‍🦺","poodle":"🐩","wolf":"🐺","fox_face":"🦊","raccoon":"🦝","cat":"🐱","cat2":"🐈","black_cat":"🐈‍⬛","lion":"🦁","tiger":"🐯","tiger2":"🐅","leopard":"🐆","horse":"🐴","racehorse":"🐎","unicorn":"🦄","zebra":"🦓","deer":"🦌","bison":"🦬","cow":"🐮","ox":"🐂","water_buffalo":"🐃","cow2":"🐄","pig":"🐷","pig2":"🐖","boar":"🐗","pig_nose":"🐽","ram":"🐏","sheep":"🐑","goat":"🐐","dromedary_camel":"🐪","camel":"🐫","llama":"🦙","giraffe":"🦒","elephant":"🐘","mammoth":"🦣","rhinoceros":"🦏","hippopotamus":"🦛","mouse":"🐭","mouse2":"🐁","rat":"🐀","hamster":"🐹","rabbit":"🐰","rabbit2":"🐇","chipmunk":"🐿️","beaver":"🦫","hedgehog":"🦔","bat":"🦇","bear":"🐻","polar_bear":"🐻‍❄️","koala":"🐨","panda_face":"🐼","sloth":"🦥","otter":"🦦","skunk":"🦨","kangaroo":"🦘","badger":"🦡","feet":"🐾","paw_prints":"🐾","turkey":"🦃","chicken":"🐔","rooster":"🐓","hatching_chick":"🐣","baby_chick":"🐤","hatched_chick":"🐥","bird":"🐦","penguin":"🐧","dove":"🕊️","eagle":"🦅","duck":"🦆","swan":"🦢","owl":"🦉","dodo":"🦤","feather":"🪶","flamingo":"🦩","peacock":"🦚","parrot":"🦜","frog":"🐸","crocodile":"🐊","turtle":"🐢","lizard":"🦎","snake":"🐍","dragon_face":"🐲","dragon":"🐉","sauropod":"🦕","t-rex":"🦖","whale":"🐳","whale2":"🐋","dolphin":"🐬","flipper":"🐬","seal":"🦭","fish":"🐟","tropical_fish":"🐠","blowfish":"🐡","shark":"🦈","octopus":"🐙","shell":"🐚","snail":"🐌","butterfly":"🦋","bug":"🐛","ant":"🐜","bee":"🐝","honeybee":"🐝","beetle":"🪲","lady_beetle":"🐞","cricket":"🦗","cockroach":"🪳","spider":"🕷️","spider_web":"🕸️","scorpion":"🦂","mosquito":"🦟","fly":"🪰","worm":"🪱","microbe":"🦠","bouquet":"💐","cherry_blossom":"🌸","white_flower":"💮","rosette":"🏵️","rose":"🌹","wilted_flower":"🥀","hibiscus":"🌺","sunflower":"🌻","blossom":"🌼","tulip":"🌷","seedling":"🌱","potted_plant":"🪴","evergreen_tree":"🌲","deciduous_tree":"🌳","palm_tree":"🌴","cactus":"🌵","ear_of_rice":"🌾","herb":"🌿","shamrock":"☘️","four_leaf_clover":"🍀","maple_leaf":"🍁","fallen_leaf":"🍂","leaves":"🍃","grapes":"🍇","melon":"🍈","watermelon":"🍉","tangerine":"🍊","orange":"🍊","mandarin":"🍊","lemon":"🍋","banana":"🍌","pineapple":"🍍","mango":"🥭","apple":"🍎","green_apple":"🍏","pear":"🍐","peach":"🍑","cherries":"🍒","strawberry":"🍓","blueberries":"🫐","kiwi_fruit":"🥝","tomato":"🍅","olive":"🫒","coconut":"🥥","avocado":"🥑","eggplant":"🍆","potato":"🥔","carrot":"🥕","corn":"🌽","hot_pepper":"🌶️","bell_pepper":"🫑","cucumber":"🥒","leafy_green":"🥬","broccoli":"🥦","garlic":"🧄","onion":"🧅","mushroom":"🍄","peanuts":"🥜","chestnut":"🌰","bread":"🍞","croissant":"🥐","baguette_bread":"🥖","flatbread":"🫓","pretzel":"🥨","bagel":"🥯","pancakes":"🥞","waffle":"🧇","cheese":"🧀","meat_on_bone":"🍖","poultry_leg":"🍗","cut_of_meat":"🥩","bacon":"🥓","hamburger":"🍔","fries":"🍟","pizza":"🍕","hotdog":"🌭","sandwich":"🥪","taco":"🌮","burrito":"🌯","tamale":"🫔","stuffed_flatbread":"🥙","falafel":"🧆","egg":"🥚","fried_egg":"🍳","shallow_pan_of_food":"🥘","stew":"🍲","fondue":"🫕","bowl_with_spoon":"🥣","green_salad":"🥗","popcorn":"🍿","butter":"🧈","salt":"🧂","canned_food":"🥫","bento":"🍱","rice_cracker":"🍘","rice_ball":"🍙","rice":"🍚","curry":"🍛","ramen":"🍜","spaghetti":"🍝","sweet_potato":"🍠","oden":"🍢","sushi":"🍣","fried_shrimp":"🍤","fish_cake":"🍥","moon_cake":"🥮","dango":"🍡","dumpling":"🥟","fortune_cookie":"🥠","takeout_box":"🥡","crab":"🦀","lobster":"🦞","shrimp":"🦐","squid":"🦑","oyster":"🦪","icecream":"🍦","shaved_ice":"🍧","ice_cream":"🍨","doughnut":"🍩","cookie":"🍪","birthday":"🎂","cake":"🍰","cupcake":"🧁","pie":"🥧","chocolate_bar":"🍫","candy":"🍬","lollipop":"🍭","custard":"🍮","honey_pot":"🍯","baby_bottle":"🍼","milk_glass":"🥛","coffee":"☕","teapot":"🫖","tea":"🍵","sake":"🍶","champagne":"🍾","wine_glass":"🍷","cocktail":"🍸","tropical_drink":"🍹","beer":"🍺","beers":"🍻","clinking_glasses":"🥂","tumbler_glass":"🥃","cup_with_straw":"🥤","bubble_tea":"🧋","beverage_box":"🧃","mate":"🧉","ice_cube":"🧊","chopsticks":"🥢","plate_with_cutlery":"🍽️","fork_and_knife":"🍴","spoon":"🥄","hocho":"🔪","knife":"🔪","amphora":"🏺","earth_africa":"🌍","earth_americas":"🌎","earth_asia":"🌏","globe_with_meridians":"🌐","world_map":"🗺️","japan":"🗾","compass":"🧭","mountain_snow":"🏔️","mountain":"⛰️","volcano":"🌋","mount_fuji":"🗻","camping":"🏕️","beach_umbrella":"🏖️","desert":"🏜️","desert_island":"🏝️","national_park":"🏞️","stadium":"🏟️","classical_building":"🏛️","building_construction":"🏗️","bricks":"🧱","rock":"🪨","wood":"🪵","hut":"🛖","houses":"🏘️","derelict_house":"🏚️","house":"🏠","house_with_garden":"🏡","office":"🏢","post_office":"🏣","european_post_office":"🏤","hospital":"🏥","bank":"🏦","hotel":"🏨","love_hotel":"🏩","convenience_store":"🏪","school":"🏫","department_store":"🏬","factory":"🏭","japanese_castle":"🏯","european_castle":"🏰","wedding":"💒","tokyo_tower":"🗼","statue_of_liberty":"🗽","church":"⛪","mosque":"🕌","hindu_temple":"🛕","synagogue":"🕍","shinto_shrine":"⛩️","kaaba":"🕋","fountain":"⛲","tent":"⛺","foggy":"🌁","night_with_stars":"🌃","cityscape":"🏙️","sunrise_over_mountains":"🌄","sunrise":"🌅","city_sunset":"🌆","city_sunrise":"🌇","bridge_at_night":"🌉","hotsprings":"♨️","carousel_horse":"🎠","ferris_wheel":"🎡","roller_coaster":"🎢","barber":"💈","circus_tent":"🎪","steam_locomotive":"🚂","railway_car":"🚃","bullettrain_side":"🚄","bullettrain_front":"🚅","train2":"🚆","metro":"🚇","light_rail":"🚈","station":"🚉","tram":"🚊","monorail":"🚝","mountain_railway":"🚞","train":"🚋","bus":"🚌","oncoming_bus":"🚍","trolleybus":"🚎","minibus":"🚐","ambulance":"🚑","fire_engine":"🚒","police_car":"🚓","oncoming_police_car":"🚔","taxi":"🚕","oncoming_taxi":"🚖","car":"🚗","red_car":"🚗","oncoming_automobile":"🚘","blue_car":"🚙","pickup_truck":"🛻","truck":"🚚","articulated_lorry":"🚛","tractor":"🚜","racing_car":"🏎️","motorcycle":"🏍️","motor_scooter":"🛵","manual_wheelchair":"🦽","motorized_wheelchair":"🦼","auto_rickshaw":"🛺","bike":"🚲","kick_scooter":"🛴","skateboard":"🛹","roller_skate":"🛼","busstop":"🚏","motorway":"🛣️","railway_track":"🛤️","oil_drum":"🛢️","fuelpump":"⛽","rotating_light":"🚨","traffic_light":"🚥","vertical_traffic_light":"🚦","stop_sign":"🛑","construction":"🚧","anchor":"⚓","boat":"⛵","sailboat":"⛵","canoe":"🛶","speedboat":"🚤","passenger_ship":"🛳️","ferry":"⛴️","motor_boat":"🛥️","ship":"🚢","airplane":"✈️","small_airplane":"🛩️","flight_departure":"🛫","flight_arrival":"🛬","parachute":"🪂","seat":"💺","helicopter":"🚁","suspension_railway":"🚟","mountain_cableway":"🚠","aerial_tramway":"🚡","artificial_satellite":"🛰️","rocket":"🚀","flying_saucer":"🛸","bellhop_bell":"🛎️","luggage":"🧳","hourglass":"⌛","hourglass_flowing_sand":"⏳","watch":"⌚","alarm_clock":"⏰","stopwatch":"⏱️","timer_clock":"⏲️","mantelpiece_clock":"🕰️","clock12":"🕛","clock1230":"🕧","clock1":"🕐","clock130":"🕜","clock2":"🕑","clock230":"🕝","clock3":"🕒","clock330":"🕞","clock4":"🕓","clock430":"🕟","clock5":"🕔","clock530":"🕠","clock6":"🕕","clock630":"🕡","clock7":"🕖","clock730":"🕢","clock8":"🕗","clock830":"🕣","clock9":"🕘","clock930":"🕤","clock10":"🕙","clock1030":"🕥","clock11":"🕚","clock1130":"🕦","new_moon":"🌑","waxing_crescent_moon":"🌒","first_quarter_moon":"🌓","moon":"🌔","waxing_gibbous_moon":"🌔","full_moon":"🌕","waning_gibbous_moon":"🌖","last_quarter_moon":"🌗","waning_crescent_moon":"🌘","crescent_moon":"🌙","new_moon_with_face":"🌚","first_quarter_moon_with_face":"🌛","last_quarter_moon_with_face":"🌜","thermometer":"🌡️","sunny":"☀️","full_moon_with_face":"🌝","sun_with_face":"🌞","ringed_planet":"🪐","star":"⭐","star2":"🌟","stars":"🌠","milky_way":"🌌","cloud":"☁️","partly_sunny":"⛅","cloud_with_lightning_and_rain":"⛈️","sun_behind_small_cloud":"🌤️","sun_behind_large_cloud":"🌥️","sun_behind_rain_cloud":"🌦️","cloud_with_rain":"🌧️","cloud_with_snow":"🌨️","cloud_with_lightning":"🌩️","tornado":"🌪️","fog":"🌫️","wind_face":"🌬️","cyclone":"🌀","rainbow":"🌈","closed_umbrella":"🌂","open_umbrella":"☂️","umbrella":"☔","parasol_on_ground":"⛱️","zap":"⚡","snowflake":"❄️","snowman_with_snow":"☃️","snowman":"⛄","comet":"☄️","fire":"🔥","droplet":"💧","ocean":"🌊","jack_o_lantern":"🎃","christmas_tree":"🎄","fireworks":"🎆","sparkler":"🎇","firecracker":"🧨","sparkles":"✨","balloon":"🎈","tada":"🎉","confetti_ball":"🎊","tanabata_tree":"🎋","bamboo":"🎍","dolls":"🎎","flags":"🎏","wind_chime":"🎐","rice_scene":"🎑","red_envelope":"🧧","ribbon":"🎀","gift":"🎁","reminder_ribbon":"🎗️","tickets":"🎟️","ticket":"🎫","medal_military":"🎖️","trophy":"🏆","medal_sports":"🏅","1st_place_medal":"🥇","2nd_place_medal":"🥈","3rd_place_medal":"🥉","soccer":"⚽","baseball":"⚾","softball":"🥎","basketball":"🏀","volleyball":"🏐","football":"🏈","rugby_football":"🏉","tennis":"🎾","flying_disc":"🥏","bowling":"🎳","cricket_game":"🏏","field_hockey":"🏑","ice_hockey":"🏒","lacrosse":"🥍","ping_pong":"🏓","badminton":"🏸","boxing_glove":"🥊","martial_arts_uniform":"🥋","goal_net":"🥅","golf":"⛳","ice_skate":"⛸️","fishing_pole_and_fish":"🎣","diving_mask":"🤿","running_shirt_with_sash":"🎽","ski":"🎿","sled":"🛷","curling_stone":"🥌","dart":"🎯","yo_yo":"🪀","kite":"🪁","8ball":"🎱","crystal_ball":"🔮","magic_wand":"🪄","nazar_amulet":"🧿","video_game":"🎮","joystick":"🕹️","slot_machine":"🎰","game_die":"🎲","jigsaw":"🧩","teddy_bear":"🧸","pinata":"🪅","nesting_dolls":"🪆","spades":"♠️","hearts":"♥️","diamonds":"♦️","clubs":"♣️","chess_pawn":"♟️","black_joker":"🃏","mahjong":"🀄","flower_playing_cards":"🎴","performing_arts":"🎭","framed_picture":"🖼️","art":"🎨","thread":"🧵","sewing_needle":"🪡","yarn":"🧶","knot":"🪢","eyeglasses":"👓","dark_sunglasses":"🕶️","goggles":"🥽","lab_coat":"🥼","safety_vest":"🦺","necktie":"👔","shirt":"👕","tshirt":"👕","jeans":"👖","scarf":"🧣","gloves":"🧤","coat":"🧥","socks":"🧦","dress":"👗","kimono":"👘","sari":"🥻","one_piece_swimsuit":"🩱","swim_brief":"🩲","shorts":"🩳","bikini":"👙","womans_clothes":"👚","purse":"👛","handbag":"👜","pouch":"👝","shopping":"🛍️","school_satchel":"🎒","thong_sandal":"🩴","mans_shoe":"👞","shoe":"👞","athletic_shoe":"👟","hiking_boot":"🥾","flat_shoe":"🥿","high_heel":"👠","sandal":"👡","ballet_shoes":"🩰","boot":"👢","crown":"👑","womans_hat":"👒","tophat":"🎩","mortar_board":"🎓","billed_cap":"🧢","military_helmet":"🪖","rescue_worker_helmet":"⛑️","prayer_beads":"📿","lipstick":"💄","ring":"💍","gem":"💎","mute":"🔇","speaker":"🔈","sound":"🔉","loud_sound":"🔊","loudspeaker":"📢","mega":"📣","postal_horn":"📯","bell":"🔔","no_bell":"🔕","musical_score":"🎼","musical_note":"🎵","notes":"🎶","studio_microphone":"🎙️","level_slider":"🎚️","control_knobs":"🎛️","microphone":"🎤","headphones":"🎧","radio":"📻","saxophone":"🎷","accordion":"🪗","guitar":"🎸","musical_keyboard":"🎹","trumpet":"🎺","violin":"🎻","banjo":"🪕","drum":"🥁","long_drum":"🪘","iphone":"📱","calling":"📲","phone":"☎️","telephone":"☎️","telephone_receiver":"📞","pager":"📟","fax":"📠","battery":"🔋","electric_plug":"🔌","computer":"💻","desktop_computer":"🖥️","printer":"🖨️","keyboard":"⌨️","computer_mouse":"🖱️","trackball":"🖲️","minidisc":"💽","floppy_disk":"💾","cd":"💿","dvd":"📀","abacus":"🧮","movie_camera":"🎥","film_strip":"🎞️","film_projector":"📽️","clapper":"🎬","tv":"📺","camera":"📷","camera_flash":"📸","video_camera":"📹","vhs":"📼","mag":"🔍","mag_right":"🔎","candle":"🕯️","bulb":"💡","flashlight":"🔦","izakaya_lantern":"🏮","lantern":"🏮","diya_lamp":"🪔","notebook_with_decorative_cover":"📔","closed_book":"📕","book":"📖","open_book":"📖","green_book":"📗","blue_book":"📘","orange_book":"📙","books":"📚","notebook":"📓","ledger":"📒","page_with_curl":"📃","scroll":"📜","page_facing_up":"📄","newspaper":"📰","newspaper_roll":"🗞️","bookmark_tabs":"📑","bookmark":"🔖","label":"🏷️","moneybag":"💰","coin":"🪙","yen":"💴","dollar":"💵","euro":"💶","pound":"💷","money_with_wings":"💸","credit_card":"💳","receipt":"🧾","chart":"💹","envelope":"✉️","email":"📧","e-mail":"📧","incoming_envelope":"📨","envelope_with_arrow":"📩","outbox_tray":"📤","inbox_tray":"📥","package":"📦","mailbox":"📫","mailbox_closed":"📪","mailbox_with_mail":"📬","mailbox_with_no_mail":"📭","postbox":"📮","ballot_box":"🗳️","pencil2":"✏️","black_nib":"✒️","fountain_pen":"🖋️","pen":"🖊️","paintbrush":"🖌️","crayon":"🖍️","memo":"📝","pencil":"📝","briefcase":"💼","file_folder":"📁","open_file_folder":"📂","card_index_dividers":"🗂️","date":"📅","calendar":"📆","spiral_notepad":"🗒️","spiral_calendar":"🗓️","card_index":"📇","chart_with_upwards_trend":"📈","chart_with_downwards_trend":"📉","bar_chart":"📊","clipboard":"📋","pushpin":"📌","round_pushpin":"📍","paperclip":"📎","paperclips":"🖇️","straight_ruler":"📏","triangular_ruler":"📐","scissors":"✂️","card_file_box":"🗃️","file_cabinet":"🗄️","wastebasket":"🗑️","lock":"🔒","unlock":"🔓","lock_with_ink_pen":"🔏","closed_lock_with_key":"🔐","key":"🔑","old_key":"🗝️","hammer":"🔨","axe":"🪓","pick":"⛏️","hammer_and_pick":"⚒️","hammer_and_wrench":"🛠️","dagger":"🗡️","crossed_swords":"⚔️","gun":"🔫","boomerang":"🪃","bow_and_arrow":"🏹","shield":"🛡️","carpentry_saw":"🪚","wrench":"🔧","screwdriver":"🪛","nut_and_bolt":"🔩","gear":"⚙️","clamp":"🗜️","balance_scale":"⚖️","probing_cane":"🦯","link":"🔗","chains":"⛓️","hook":"🪝","toolbox":"🧰","magnet":"🧲","ladder":"🪜","alembic":"⚗️","test_tube":"🧪","petri_dish":"🧫","dna":"🧬","microscope":"🔬","telescope":"🔭","satellite":"📡","syringe":"💉","drop_of_blood":"🩸","pill":"💊","adhesive_bandage":"🩹","stethoscope":"🩺","door":"🚪","elevator":"🛗","mirror":"🪞","window":"🪟","bed":"🛏️","couch_and_lamp":"🛋️","chair":"🪑","toilet":"🚽","plunger":"🪠","shower":"🚿","bathtub":"🛁","mouse_trap":"🪤","razor":"🪒","lotion_bottle":"🧴","safety_pin":"🧷","broom":"🧹","basket":"🧺","roll_of_paper":"🧻","bucket":"🪣","soap":"🧼","toothbrush":"🪥","sponge":"🧽","fire_extinguisher":"🧯","shopping_cart":"🛒","smoking":"🚬","coffin":"⚰️","headstone":"🪦","funeral_urn":"⚱️","moyai":"🗿","placard":"🪧","atm":"🏧","put_litter_in_its_place":"🚮","potable_water":"🚰","wheelchair":"♿","mens":"🚹","womens":"🚺","restroom":"🚻","baby_symbol":"🚼","wc":"🚾","passport_control":"🛂","customs":"🛃","baggage_claim":"🛄","left_luggage":"🛅","warning":"⚠️","children_crossing":"🚸","no_entry":"⛔","no_entry_sign":"🚫","no_bicycles":"🚳","no_smoking":"🚭","do_not_litter":"🚯","non-potable_water":"🚱","no_pedestrians":"🚷","no_mobile_phones":"📵","underage":"🔞","radioactive":"☢️","biohazard":"☣️","arrow_up":"⬆️","arrow_upper_right":"↗️","arrow_right":"➡️","arrow_lower_right":"↘️","arrow_down":"⬇️","arrow_lower_left":"↙️","arrow_left":"⬅️","arrow_upper_left":"↖️","arrow_up_down":"↕️","left_right_arrow":"↔️","leftwards_arrow_with_hook":"↩️","arrow_right_hook":"↪️","arrow_heading_up":"⤴️","arrow_heading_down":"⤵️","arrows_clockwise":"🔃","arrows_counterclockwise":"🔄","back":"🔙","end":"🔚","on":"🔛","soon":"🔜","top":"🔝","place_of_worship":"🛐","atom_symbol":"⚛️","om":"🕉️","star_of_david":"✡️","wheel_of_dharma":"☸️","yin_yang":"☯️","latin_cross":"✝️","orthodox_cross":"☦️","star_and_crescent":"☪️","peace_symbol":"☮️","menorah":"🕎","six_pointed_star":"🔯","aries":"♈","taurus":"♉","gemini":"♊","cancer":"♋","leo":"♌","virgo":"♍","libra":"♎","scorpius":"♏","sagittarius":"♐","capricorn":"♑","aquarius":"♒","pisces":"♓","ophiuchus":"⛎","twisted_rightwards_arrows":"🔀","repeat":"🔁","repeat_one":"🔂","arrow_forward":"▶️","fast_forward":"⏩","next_track_button":"⏭️","play_or_pause_button":"⏯️","arrow_backward":"◀️","rewind":"⏪","previous_track_button":"⏮️","arrow_up_small":"🔼","arrow_double_up":"⏫","arrow_down_small":"🔽","arrow_double_down":"⏬","pause_button":"⏸️","stop_button":"⏹️","record_button":"⏺️","eject_button":"⏏️","cinema":"🎦","low_brightness":"🔅","high_brightness":"🔆","signal_strength":"📶","vibration_mode":"📳","mobile_phone_off":"📴","female_sign":"♀️","male_sign":"♂️","transgender_symbol":"⚧️","heavy_multiplication_x":"✖️","heavy_plus_sign":"➕","heavy_minus_sign":"➖","heavy_division_sign":"➗","infinity":"♾️","bangbang":"‼️","interrobang":"⁉️","question":"❓","grey_question":"❔","grey_exclamation":"❕","exclamation":"❗","heavy_exclamation_mark":"❗","wavy_dash":"〰️","currency_exchange":"💱","heavy_dollar_sign":"💲","medical_symbol":"⚕️","recycle":"♻️","fleur_de_lis":"⚜️","trident":"🔱","name_badge":"📛","beginner":"🔰","o":"⭕","white_check_mark":"✅","ballot_box_with_check":"☑️","heavy_check_mark":"✔️","x":"❌","negative_squared_cross_mark":"❎","curly_loop":"➰","loop":"➿","part_alternation_mark":"〽️","eight_spoked_asterisk":"✳️","eight_pointed_black_star":"✴️","sparkle":"❇️","copyright":"©️","registered":"®️","tm":"™️","hash":"#️⃣","asterisk":"*️⃣","zero":"0️⃣","one":"1️⃣","two":"2️⃣","three":"3️⃣","four":"4️⃣","five":"5️⃣","six":"6️⃣","seven":"7️⃣","eight":"8️⃣","nine":"9️⃣","keycap_ten":"🔟","capital_abcd":"🔠","abcd":"🔡","symbols":"🔣","abc":"🔤","a":"🅰️","ab":"🆎","b":"🅱️","cl":"🆑","cool":"🆒","free":"🆓","information_source":"ℹ️","id":"🆔","m":"Ⓜ️","new":"🆕","ng":"🆖","o2":"🅾️","ok":"🆗","parking":"🅿️","sos":"🆘","up":"🆙","vs":"🆚","koko":"🈁","sa":"🈂️","ideograph_advantage":"🉐","accept":"🉑","congratulations":"㊗️","secret":"㊙️","u6e80":"🈵","red_circle":"🔴","orange_circle":"🟠","yellow_circle":"🟡","green_circle":"🟢","large_blue_circle":"🔵","purple_circle":"🟣","brown_circle":"🟤","black_circle":"⚫","white_circle":"⚪","red_square":"🟥","orange_square":"🟧","yellow_square":"🟨","green_square":"🟩","blue_square":"🟦","purple_square":"🟪","brown_square":"🟫","black_large_square":"⬛","white_large_square":"⬜","black_medium_square":"◼️","white_medium_square":"◻️","black_medium_small_square":"◾","white_medium_small_square":"◽","black_small_square":"▪️","white_small_square":"▫️","large_orange_diamond":"🔶","large_blue_diamond":"🔷","small_orange_diamond":"🔸","small_blue_diamond":"🔹","small_red_triangle":"🔺","small_red_triangle_down":"🔻","diamond_shape_with_a_dot_inside":"💠","radio_button":"🔘","white_square_button":"🔳","black_square_button":"🔲","checkered_flag":"🏁","triangular_flag_on_post":"🚩","crossed_flags":"🎌","black_flag":"🏴","white_flag":"🏳️","rainbow_flag":"🏳️‍🌈","transgender_flag":"🏳️‍⚧️","pirate_flag":"🏴‍☠️","ascension_island":"🇦🇨","andorra":"🇦🇩","united_arab_emirates":"🇦🇪","afghanistan":"🇦🇫","antigua_barbuda":"🇦🇬","anguilla":"🇦🇮","albania":"🇦🇱","armenia":"🇦🇲","angola":"🇦🇴","antarctica":"🇦🇶","argentina":"🇦🇷","american_samoa":"🇦🇸","austria":"🇦🇹","australia":"🇦🇺","aruba":"🇦🇼","aland_islands":"🇦🇽","azerbaijan":"🇦🇿","bosnia_herzegovina":"🇧🇦","barbados":"🇧🇧","bangladesh":"🇧🇩","belgium":"🇧🇪","burkina_faso":"🇧🇫","bulgaria":"🇧🇬","bahrain":"🇧🇭","burundi":"🇧🇮","benin":"🇧🇯","st_barthelemy":"🇧🇱","bermuda":"🇧🇲","brunei":"🇧🇳","bolivia":"🇧🇴","caribbean_netherlands":"🇧🇶","brazil":"🇧🇷","bahamas":"🇧🇸","bhutan":"🇧🇹","bouvet_island":"🇧🇻","botswana":"🇧🇼","belarus":"🇧🇾","belize":"🇧🇿","canada":"🇨🇦","cocos_islands":"🇨🇨","congo_kinshasa":"🇨🇩","central_african_republic":"🇨🇫","congo_brazzaville":"🇨🇬","switzerland":"🇨🇭","cote_divoire":"🇨🇮","cook_islands":"🇨🇰","chile":"🇨🇱","cameroon":"🇨🇲","cn":"🇨🇳","colombia":"🇨🇴","clipperton_island":"🇨🇵","costa_rica":"🇨🇷","cuba":"🇨🇺","cape_verde":"🇨🇻","curacao":"🇨🇼","christmas_island":"🇨🇽","cyprus":"🇨🇾","czech_republic":"🇨🇿","de":"🇩🇪","diego_garcia":"🇩🇬","djibouti":"🇩🇯","denmark":"🇩🇰","dominica":"🇩🇲","dominican_republic":"🇩🇴","algeria":"🇩🇿","ceuta_melilla":"🇪🇦","ecuador":"🇪🇨","estonia":"🇪🇪","egypt":"🇪🇬","western_sahara":"🇪🇭","eritrea":"🇪🇷","es":"🇪🇸","ethiopia":"🇪🇹","eu":"🇪🇺","european_union":"🇪🇺","finland":"🇫🇮","fiji":"🇫🇯","falkland_islands":"🇫🇰","micronesia":"🇫🇲","faroe_islands":"🇫🇴","fr":"🇫🇷","gabon":"🇬🇦","gb":"🇬🇧","uk":"🇬🇧","grenada":"🇬🇩","georgia":"🇬🇪","french_guiana":"🇬🇫","guernsey":"🇬🇬","ghana":"🇬🇭","gibraltar":"🇬🇮","greenland":"🇬🇱","gambia":"🇬🇲","guinea":"🇬🇳","guadeloupe":"🇬🇵","equatorial_guinea":"🇬🇶","greece":"🇬🇷","south_georgia_south_sandwich_islands":"🇬🇸","guatemala":"🇬🇹","guam":"🇬🇺","guinea_bissau":"🇬🇼","guyana":"🇬🇾","hong_kong":"🇭🇰","heard_mcdonald_islands":"🇭🇲","honduras":"🇭🇳","croatia":"🇭🇷","haiti":"🇭🇹","hungary":"🇭🇺","canary_islands":"🇮🇨","indonesia":"🇮🇩","ireland":"🇮🇪","israel":"🇮🇱","isle_of_man":"🇮🇲","india":"🇮🇳","british_indian_ocean_territory":"🇮🇴","iraq":"🇮🇶","iran":"🇮🇷","iceland":"🇮🇸","it":"🇮🇹","jersey":"🇯🇪","jamaica":"🇯🇲","jordan":"🇯🇴","jp":"🇯🇵","kenya":"🇰🇪","kyrgyzstan":"🇰🇬","cambodia":"🇰🇭","kiribati":"🇰🇮","comoros":"🇰🇲","st_kitts_nevis":"🇰🇳","north_korea":"🇰🇵","kr":"🇰🇷","kuwait":"🇰🇼","cayman_islands":"🇰🇾","kazakhstan":"🇰🇿","laos":"🇱🇦","lebanon":"🇱🇧","st_lucia":"🇱🇨","liechtenstein":"🇱🇮","sri_lanka":"🇱🇰","liberia":"🇱🇷","lesotho":"🇱🇸","lithuania":"🇱🇹","luxembourg":"🇱🇺","latvia":"🇱🇻","libya":"🇱🇾","morocco":"🇲🇦","monaco":"🇲🇨","moldova":"🇲🇩","montenegro":"🇲🇪","st_martin":"🇲🇫","madagascar":"🇲🇬","marshall_islands":"🇲🇭","macedonia":"🇲🇰","mali":"🇲🇱","myanmar":"🇲🇲","mongolia":"🇲🇳","macau":"🇲🇴","northern_mariana_islands":"🇲🇵","martinique":"🇲🇶","mauritania":"🇲🇷","montserrat":"🇲🇸","malta":"🇲🇹","mauritius":"🇲🇺","maldives":"🇲🇻","malawi":"🇲🇼","mexico":"🇲🇽","malaysia":"🇲🇾","mozambique":"🇲🇿","namibia":"🇳🇦","new_caledonia":"🇳🇨","niger":"🇳🇪","norfolk_island":"🇳🇫","nigeria":"🇳🇬","nicaragua":"🇳🇮","netherlands":"🇳🇱","norway":"🇳🇴","nepal":"🇳🇵","nauru":"🇳🇷","niue":"🇳🇺","new_zealand":"🇳🇿","oman":"🇴🇲","panama":"🇵🇦","peru":"🇵🇪","french_polynesia":"🇵🇫","papua_new_guinea":"🇵🇬","philippines":"🇵🇭","pakistan":"🇵🇰","poland":"🇵🇱","st_pierre_miquelon":"🇵🇲","pitcairn_islands":"🇵🇳","puerto_rico":"🇵🇷","palestinian_territories":"🇵🇸","portugal":"🇵🇹","palau":"🇵🇼","paraguay":"🇵🇾","qatar":"🇶🇦","reunion":"🇷🇪","romania":"🇷🇴","serbia":"🇷🇸","ru":"🇷🇺","rwanda":"🇷🇼","saudi_arabia":"🇸🇦","solomon_islands":"🇸🇧","seychelles":"🇸🇨","sudan":"🇸🇩","sweden":"🇸🇪","singapore":"🇸🇬","st_helena":"🇸🇭","slovenia":"🇸🇮","svalbard_jan_mayen":"🇸🇯","slovakia":"🇸🇰","sierra_leone":"🇸🇱","san_marino":"🇸🇲","senegal":"🇸🇳","somalia":"🇸🇴","suriname":"🇸🇷","south_sudan":"🇸🇸","sao_tome_principe":"🇸🇹","el_salvador":"🇸🇻","sint_maarten":"🇸🇽","syria":"🇸🇾","swaziland":"🇸🇿","tristan_da_cunha":"🇹🇦","turks_caicos_islands":"🇹🇨","chad":"🇹🇩","french_southern_territories":"🇹🇫","togo":"🇹🇬","thailand":"🇹🇭","tajikistan":"🇹🇯","tokelau":"🇹🇰","timor_leste":"🇹🇱","turkmenistan":"🇹🇲","tunisia":"🇹🇳","tonga":"🇹🇴","tr":"🇹🇷","trinidad_tobago":"🇹🇹","tuvalu":"🇹🇻","taiwan":"🇹🇼","tanzania":"🇹🇿","ukraine":"🇺🇦","uganda":"🇺🇬","us_outlying_islands":"🇺🇲","united_nations":"🇺🇳","us":"🇺🇸","uruguay":"🇺🇾","uzbekistan":"🇺🇿","vatican_city":"🇻🇦","st_vincent_grenadines":"🇻🇨","venezuela":"🇻🇪","british_virgin_islands":"🇻🇬","us_virgin_islands":"🇻🇮","vietnam":"🇻🇳","vanuatu":"🇻🇺","wallis_futuna":"🇼🇫","samoa":"🇼🇸","kosovo":"🇽🇰","yemen":"🇾🇪","mayotte":"🇾🇹","south_africa":"🇿🇦","zambia":"🇿🇲","zimbabwe":"🇿🇼","england":"🏴󠁧󠁢󠁥󠁮󠁧󠁿","scotland":"🏴󠁧󠁢󠁳󠁣󠁴󠁿","wales":"🏴󠁧󠁢󠁷󠁬󠁳󠁿"}')},7527:(e,t,r)=>{"use strict";r.r(t)},9239:(e,t,r)=>{var n=r(5049);e.exports=function(e){var t,r="",i=e||{};return function(e,i,o,a,s,u,l){r=r+'<div class="msg-row collapse"'+n.attr("id",i,!0,!0)+'><div class="col-md-auto"><div'+(n.attr("class",n.classes(["badge","badge-pill",s],[!1,!1,!0]),!1,!0)+n.attr("style",n.style(`background-color: #${l};`),!0,!0))+">"+n.escape(null==(t=u)?"":t)+"</div></div><div"+n.attr("class",n.classes(["col",a],[!1,!0]),!1,!0)+">"+(null==(t=o)?"":t)+'</div><time class="col-md-auto align-self-end text-muted">'+n.escape(null==(t=(new e).toLocaleTimeString())?"":t)+"</time></div>"}.call(this,"Date"in i?i.Date:"undefined"!=typeof Date?Date:void 0,"id"in i?i.id:"undefined"!=typeof id?id:void 0,"msg"in i?i.msg:"undefined"!=typeof msg?msg:void 0,"msgClass"in i?i.msgClass:"undefined"!=typeof msgClass?msgClass:void 0,"msgTextColorClass"in i?i.msgTextColorClass:"undefined"!=typeof msgTextColorClass?msgTextColorClass:void 0,"ressourceName"in i?i.ressourceName:"undefined"!=typeof ressourceName?ressourceName:void 0,"rgbHex"in i?i.rgbHex:"undefined"!=typeof rgbHex?rgbHex:void 0),r}},3380:function(e,t,r){!function(e,t,r){"use strict";function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i=n(t),o=n(r);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),e}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var l="transitionend";function d(e){var t=this,r=!1;return i.default(this).one(c.TRANSITION_END,(function(){r=!0})),setTimeout((function(){r||c.triggerTransitionEnd(t)}),e),this}var c={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var r=e.getAttribute("href");t=r&&"#"!==r?r.trim():""}try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=i.default(e).css("transition-duration"),r=i.default(e).css("transition-delay"),n=parseFloat(t),o=parseFloat(r);return n||o?(t=t.split(",")[0],r=r.split(",")[0],1e3*(parseFloat(t)+parseFloat(r))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){i.default(e).trigger(l)},supportsTransitionEnd:function(){return Boolean(l)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,r){for(var n in r)if(Object.prototype.hasOwnProperty.call(r,n)){var i=r[n],o=t[n],a=o&&c.isElement(o)?"element":null==(s=o)?""+s:{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(i).test(a))throw new Error(e.toUpperCase()+': Option "'+n+'" provided type "'+a+'" but expected type "'+i+'".')}var s},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){var t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?c.findShadowRoot(e.parentNode):null},jQueryDetection:function(){if(void 0===i.default)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=i.default.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};c.jQueryDetection(),i.default.fn.emulateTransitionEnd=d,i.default.event.special[c.TRANSITION_END]={bindType:l,delegateType:l,handle:function(e){if(i.default(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}};var f="bs.alert",h=i.default.fn.alert,p=function(){function e(e){this._element=e}var t=e.prototype;return t.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},t.dispose=function(){i.default.removeData(this._element,f),this._element=null},t._getRootElement=function(e){var t=c.getSelectorFromElement(e),r=!1;return t&&(r=document.querySelector(t)),r||(r=i.default(e).closest(".alert")[0]),r},t._triggerCloseEvent=function(e){var t=i.default.Event("close.bs.alert");return i.default(e).trigger(t),t},t._removeElement=function(e){var t=this;if(i.default(e).removeClass("show"),i.default(e).hasClass("fade")){var r=c.getTransitionDurationFromElement(e);i.default(e).one(c.TRANSITION_END,(function(r){return t._destroyElement(e,r)})).emulateTransitionEnd(r)}else this._destroyElement(e)},t._destroyElement=function(e){i.default(e).detach().trigger("closed.bs.alert").remove()},e._jQueryInterface=function(t){return this.each((function(){var r=i.default(this),n=r.data(f);n||(n=new e(this),r.data(f,n)),"close"===t&&n[t](this)}))},e._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}}]),e}();i.default(document).on("click.bs.alert.data-api",'[data-dismiss="alert"]',p._handleDismiss(new p)),i.default.fn.alert=p._jQueryInterface,i.default.fn.alert.Constructor=p,i.default.fn.alert.noConflict=function(){return i.default.fn.alert=h,p._jQueryInterface};var _="bs.button",m=i.default.fn.button,g="active",b='[data-toggle^="button"]',v='input:not([type="hidden"])',y=".btn",w=function(){function e(e){this._element=e,this.shouldAvoidTriggerChange=!1}var t=e.prototype;return t.toggle=function(){var e=!0,t=!0,r=i.default(this._element).closest('[data-toggle="buttons"]')[0];if(r){var n=this._element.querySelector(v);if(n){if("radio"===n.type)if(n.checked&&this._element.classList.contains(g))e=!1;else{var o=r.querySelector(".active");o&&i.default(o).removeClass(g)}e&&("checkbox"!==n.type&&"radio"!==n.type||(n.checked=!this._element.classList.contains(g)),this.shouldAvoidTriggerChange||i.default(n).trigger("change")),n.focus(),t=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(t&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(g)),e&&i.default(this._element).toggleClass(g))},t.dispose=function(){i.default.removeData(this._element,_),this._element=null},e._jQueryInterface=function(t,r){return this.each((function(){var n=i.default(this),o=n.data(_);o||(o=new e(this),n.data(_,o)),o.shouldAvoidTriggerChange=r,"toggle"===t&&o[t]()}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}}]),e}();i.default(document).on("click.bs.button.data-api",b,(function(e){var t=e.target,r=t;if(i.default(t).hasClass("btn")||(t=i.default(t).closest(y)[0]),!t||t.hasAttribute("disabled")||t.classList.contains("disabled"))e.preventDefault();else{var n=t.querySelector(v);if(n&&(n.hasAttribute("disabled")||n.classList.contains("disabled")))return void e.preventDefault();"INPUT"!==r.tagName&&"LABEL"===t.tagName||w._jQueryInterface.call(i.default(t),"toggle","INPUT"===r.tagName)}})).on("focus.bs.button.data-api blur.bs.button.data-api",b,(function(e){var t=i.default(e.target).closest(y)[0];i.default(t).toggleClass("focus",/^focus(in)?$/.test(e.type))})),i.default(window).on("load.bs.button.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-toggle="buttons"] .btn')),t=0,r=e.length;t<r;t++){var n=e[t],i=n.querySelector(v);i.checked||i.hasAttribute("checked")?n.classList.add(g):n.classList.remove(g)}for(var o=0,a=(e=[].slice.call(document.querySelectorAll('[data-toggle="button"]'))).length;o<a;o++){var s=e[o];"true"===s.getAttribute("aria-pressed")?s.classList.add(g):s.classList.remove(g)}})),i.default.fn.button=w._jQueryInterface,i.default.fn.button.Constructor=w,i.default.fn.button.noConflict=function(){return i.default.fn.button=m,w._jQueryInterface};var k="carousel",C="bs.carousel",E=".bs.carousel",x=i.default.fn[k],A={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},D={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},T="next",S="prev",q="slid.bs.carousel",N="active",F=".active.carousel-item",I={TOUCH:"touch",PEN:"pen"},L=function(){function e(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._element=e,this._indicatorsElement=this._element.querySelector(".carousel-indicators"),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var t=e.prototype;return t.next=function(){this._isSliding||this._slide(T)},t.nextWhenVisible=function(){var e=i.default(this._element);!document.hidden&&e.is(":visible")&&"hidden"!==e.css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide(S)},t.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(".carousel-item-next, .carousel-item-prev")&&(c.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(e){var t=this;this._activeElement=this._element.querySelector(F);var r=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)i.default(this._element).one(q,(function(){return t.to(e)}));else{if(r===e)return this.pause(),void this.cycle();var n=e>r?T:S;this._slide(n,this._items[e])}},t.dispose=function(){i.default(this._element).off(E),i.default.removeData(this._element,C),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(e){return e=u({},A,e),c.typeCheckConfig(k,e,D),e},t._handleSwipe=function(){var e=Math.abs(this.touchDeltaX);if(!(e<=40)){var t=e/this.touchDeltaX;this.touchDeltaX=0,t>0&&this.prev(),t<0&&this.next()}},t._addEventListeners=function(){var e=this;this._config.keyboard&&i.default(this._element).on("keydown.bs.carousel",(function(t){return e._keydown(t)})),"hover"===this._config.pause&&i.default(this._element).on("mouseenter.bs.carousel",(function(t){return e.pause(t)})).on("mouseleave.bs.carousel",(function(t){return e.cycle(t)})),this._config.touch&&this._addTouchEventListeners()},t._addTouchEventListeners=function(){var e=this;if(this._touchSupported){var t=function(t){e._pointerEvent&&I[t.originalEvent.pointerType.toUpperCase()]?e.touchStartX=t.originalEvent.clientX:e._pointerEvent||(e.touchStartX=t.originalEvent.touches[0].clientX)},r=function(t){e._pointerEvent&&I[t.originalEvent.pointerType.toUpperCase()]&&(e.touchDeltaX=t.originalEvent.clientX-e.touchStartX),e._handleSwipe(),"hover"===e._config.pause&&(e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout((function(t){return e.cycle(t)}),500+e._config.interval))};i.default(this._element.querySelectorAll(".carousel-item img")).on("dragstart.bs.carousel",(function(e){return e.preventDefault()})),this._pointerEvent?(i.default(this._element).on("pointerdown.bs.carousel",(function(e){return t(e)})),i.default(this._element).on("pointerup.bs.carousel",(function(e){return r(e)})),this._element.classList.add("pointer-event")):(i.default(this._element).on("touchstart.bs.carousel",(function(e){return t(e)})),i.default(this._element).on("touchmove.bs.carousel",(function(t){return function(t){t.originalEvent.touches&&t.originalEvent.touches.length>1?e.touchDeltaX=0:e.touchDeltaX=t.originalEvent.touches[0].clientX-e.touchStartX}(t)})),i.default(this._element).on("touchend.bs.carousel",(function(e){return r(e)})))}},t._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},t._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(".carousel-item")):[],this._items.indexOf(e)},t._getItemByDirection=function(e,t){var r=e===T,n=e===S,i=this._getItemIndex(t),o=this._items.length-1;if((n&&0===i||r&&i===o)&&!this._config.wrap)return t;var a=(i+(e===S?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},t._triggerSlideEvent=function(e,t){var r=this._getItemIndex(e),n=this._getItemIndex(this._element.querySelector(F)),o=i.default.Event("slide.bs.carousel",{relatedTarget:e,direction:t,from:n,to:r});return i.default(this._element).trigger(o),o},t._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var t=[].slice.call(this._indicatorsElement.querySelectorAll(".active"));i.default(t).removeClass(N);var r=this._indicatorsElement.children[this._getItemIndex(e)];r&&i.default(r).addClass(N)}},t._slide=function(e,t){var r,n,o,a=this,s=this._element.querySelector(F),u=this._getItemIndex(s),l=t||s&&this._getItemByDirection(e,s),d=this._getItemIndex(l),f=Boolean(this._interval);if(e===T?(r="carousel-item-left",n="carousel-item-next",o="left"):(r="carousel-item-right",n="carousel-item-prev",o="right"),l&&i.default(l).hasClass(N))this._isSliding=!1;else if(!this._triggerSlideEvent(l,o).isDefaultPrevented()&&s&&l){this._isSliding=!0,f&&this.pause(),this._setActiveIndicatorElement(l);var h=i.default.Event(q,{relatedTarget:l,direction:o,from:u,to:d});if(i.default(this._element).hasClass("slide")){i.default(l).addClass(n),c.reflow(l),i.default(s).addClass(r),i.default(l).addClass(r);var p=parseInt(l.getAttribute("data-interval"),10);p?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=p):this._config.interval=this._config.defaultInterval||this._config.interval;var _=c.getTransitionDurationFromElement(s);i.default(s).one(c.TRANSITION_END,(function(){i.default(l).removeClass(r+" "+n).addClass(N),i.default(s).removeClass("active "+n+" "+r),a._isSliding=!1,setTimeout((function(){return i.default(a._element).trigger(h)}),0)})).emulateTransitionEnd(_)}else i.default(s).removeClass(N),i.default(l).addClass(N),this._isSliding=!1,i.default(this._element).trigger(h);f&&this.cycle()}},e._jQueryInterface=function(t){return this.each((function(){var r=i.default(this).data(C),n=u({},A,i.default(this).data());"object"==typeof t&&(n=u({},n,t));var o="string"==typeof t?t:n.slide;if(r||(r=new e(this,n),i.default(this).data(C,r)),"number"==typeof t)r.to(t);else if("string"==typeof o){if(void 0===r[o])throw new TypeError('No method named "'+o+'"');r[o]()}else n.interval&&n.ride&&(r.pause(),r.cycle())}))},e._dataApiClickHandler=function(t){var r=c.getSelectorFromElement(this);if(r){var n=i.default(r)[0];if(n&&i.default(n).hasClass("carousel")){var o=u({},i.default(n).data(),i.default(this).data()),a=this.getAttribute("data-slide-to");a&&(o.interval=!1),e._jQueryInterface.call(i.default(n),o),a&&i.default(n).data(C).to(a),t.preventDefault()}}},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return A}}]),e}();i.default(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",L._dataApiClickHandler),i.default(window).on("load.bs.carousel.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-ride="carousel"]')),t=0,r=e.length;t<r;t++){var n=i.default(e[t]);L._jQueryInterface.call(n,n.data())}})),i.default.fn[k]=L._jQueryInterface,i.default.fn[k].Constructor=L,i.default.fn[k].noConflict=function(){return i.default.fn[k]=x,L._jQueryInterface};var O="collapse",z="bs.collapse",j=i.default.fn[O],R={toggle:!0,parent:""},M={toggle:"boolean",parent:"(string|element)"},P="show",B="collapse",H="collapsing",U="collapsed",V="width",$='[data-toggle="collapse"]',W=function(){function e(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var r=[].slice.call(document.querySelectorAll($)),n=0,i=r.length;n<i;n++){var o=r[n],a=c.getSelectorFromElement(o),s=[].slice.call(document.querySelectorAll(a)).filter((function(t){return t===e}));null!==a&&s.length>0&&(this._selector=a,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=e.prototype;return t.toggle=function(){i.default(this._element).hasClass(P)?this.hide():this.show()},t.show=function(){var t,r,n=this;if(!(this._isTransitioning||i.default(this._element).hasClass(P)||(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter((function(e){return"string"==typeof n._config.parent?e.getAttribute("data-parent")===n._config.parent:e.classList.contains(B)}))).length&&(t=null),t&&(r=i.default(t).not(this._selector).data(z))&&r._isTransitioning))){var o=i.default.Event("show.bs.collapse");if(i.default(this._element).trigger(o),!o.isDefaultPrevented()){t&&(e._jQueryInterface.call(i.default(t).not(this._selector),"hide"),r||i.default(t).data(z,null));var a=this._getDimension();i.default(this._element).removeClass(B).addClass(H),this._element.style[a]=0,this._triggerArray.length&&i.default(this._triggerArray).removeClass(U).attr("aria-expanded",!0),this.setTransitioning(!0);var s="scroll"+(a[0].toUpperCase()+a.slice(1)),u=c.getTransitionDurationFromElement(this._element);i.default(this._element).one(c.TRANSITION_END,(function(){i.default(n._element).removeClass(H).addClass("collapse show"),n._element.style[a]="",n.setTransitioning(!1),i.default(n._element).trigger("shown.bs.collapse")})).emulateTransitionEnd(u),this._element.style[a]=this._element[s]+"px"}}},t.hide=function(){var e=this;if(!this._isTransitioning&&i.default(this._element).hasClass(P)){var t=i.default.Event("hide.bs.collapse");if(i.default(this._element).trigger(t),!t.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",c.reflow(this._element),i.default(this._element).addClass(H).removeClass("collapse show");var n=this._triggerArray.length;if(n>0)for(var o=0;o<n;o++){var a=this._triggerArray[o],s=c.getSelectorFromElement(a);null!==s&&(i.default([].slice.call(document.querySelectorAll(s))).hasClass(P)||i.default(a).addClass(U).attr("aria-expanded",!1))}this.setTransitioning(!0);this._element.style[r]="";var u=c.getTransitionDurationFromElement(this._element);i.default(this._element).one(c.TRANSITION_END,(function(){e.setTransitioning(!1),i.default(e._element).removeClass(H).addClass(B).trigger("hidden.bs.collapse")})).emulateTransitionEnd(u)}}},t.setTransitioning=function(e){this._isTransitioning=e},t.dispose=function(){i.default.removeData(this._element,z),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(e){return(e=u({},R,e)).toggle=Boolean(e.toggle),c.typeCheckConfig(O,e,M),e},t._getDimension=function(){return i.default(this._element).hasClass(V)?V:"height"},t._getParent=function(){var t,r=this;c.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var n='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(t.querySelectorAll(n));return i.default(o).each((function(t,n){r._addAriaAndCollapsedClass(e._getTargetFromElement(n),[n])})),t},t._addAriaAndCollapsedClass=function(e,t){var r=i.default(e).hasClass(P);t.length&&i.default(t).toggleClass(U,!r).attr("aria-expanded",r)},e._getTargetFromElement=function(e){var t=c.getSelectorFromElement(e);return t?document.querySelector(t):null},e._jQueryInterface=function(t){return this.each((function(){var r=i.default(this),n=r.data(z),o=u({},R,r.data(),"object"==typeof t&&t?t:{});if(!n&&o.toggle&&"string"==typeof t&&/show|hide/.test(t)&&(o.toggle=!1),n||(n=new e(this,o),r.data(z,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return R}}]),e}();i.default(document).on("click.bs.collapse.data-api",$,(function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var t=i.default(this),r=c.getSelectorFromElement(this),n=[].slice.call(document.querySelectorAll(r));i.default(n).each((function(){var e=i.default(this),r=e.data(z)?"toggle":t.data();W._jQueryInterface.call(e,r)}))})),i.default.fn[O]=W._jQueryInterface,i.default.fn[O].Constructor=W,i.default.fn[O].noConflict=function(){return i.default.fn[O]=j,W._jQueryInterface};var Z="dropdown",Q="bs.dropdown",G=".bs.dropdown",Y=i.default.fn[Z],J=new RegExp("38|40|27"),K="hide.bs.dropdown",X="hidden.bs.dropdown",ee="click.bs.dropdown.data-api",te="keydown.bs.dropdown.data-api",re="disabled",ne="show",ie="dropdown-menu-right",oe='[data-toggle="dropdown"]',ae=".dropdown-menu",se={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},ue={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},le=function(){function e(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=e.prototype;return t.toggle=function(){if(!this._element.disabled&&!i.default(this._element).hasClass(re)){var t=i.default(this._menu).hasClass(ne);e._clearMenus(),t||this.show(!0)}},t.show=function(t){if(void 0===t&&(t=!1),!(this._element.disabled||i.default(this._element).hasClass(re)||i.default(this._menu).hasClass(ne))){var r={relatedTarget:this._element},n=i.default.Event("show.bs.dropdown",r),a=e._getParentFromElement(this._element);if(i.default(a).trigger(n),!n.isDefaultPrevented()){if(!this._inNavbar&&t){if(void 0===o.default)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var s=this._element;"parent"===this._config.reference?s=a:c.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&i.default(a).addClass("position-static"),this._popper=new o.default(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===i.default(a).closest(".navbar-nav").length&&i.default(document.body).children().on("mouseover",null,i.default.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),i.default(this._menu).toggleClass(ne),i.default(a).toggleClass(ne).trigger(i.default.Event("shown.bs.dropdown",r))}}},t.hide=function(){if(!this._element.disabled&&!i.default(this._element).hasClass(re)&&i.default(this._menu).hasClass(ne)){var t={relatedTarget:this._element},r=i.default.Event(K,t),n=e._getParentFromElement(this._element);i.default(n).trigger(r),r.isDefaultPrevented()||(this._popper&&this._popper.destroy(),i.default(this._menu).toggleClass(ne),i.default(n).toggleClass(ne).trigger(i.default.Event(X,t)))}},t.dispose=function(){i.default.removeData(this._element,Q),i.default(this._element).off(G),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;i.default(this._element).on("click.bs.dropdown",(function(t){t.preventDefault(),t.stopPropagation(),e.toggle()}))},t._getConfig=function(e){return e=u({},this.constructor.Default,i.default(this._element).data(),e),c.typeCheckConfig(Z,e,this.constructor.DefaultType),e},t._getMenuElement=function(){if(!this._menu){var t=e._getParentFromElement(this._element);t&&(this._menu=t.querySelector(ae))}return this._menu},t._getPlacement=function(){var e=i.default(this._element.parentNode),t="bottom-start";return e.hasClass("dropup")?t=i.default(this._menu).hasClass(ie)?"top-end":"top-start":e.hasClass("dropright")?t="right-start":e.hasClass("dropleft")?t="left-start":i.default(this._menu).hasClass(ie)&&(t="bottom-end"),t},t._detectNavbar=function(){return i.default(this._element).closest(".navbar").length>0},t._getOffset=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=u({},t.offsets,e._config.offset(t.offsets,e._element)||{}),t}:t.offset=this._config.offset,t},t._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),u({},e,this._config.popperConfig)},e._jQueryInterface=function(t){return this.each((function(){var r=i.default(this).data(Q);if(r||(r=new e(this,"object"==typeof t?t:null),i.default(this).data(Q,r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},e._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var r=[].slice.call(document.querySelectorAll(oe)),n=0,o=r.length;n<o;n++){var a=e._getParentFromElement(r[n]),s=i.default(r[n]).data(Q),u={relatedTarget:r[n]};if(t&&"click"===t.type&&(u.clickEvent=t),s){var l=s._menu;if(i.default(a).hasClass(ne)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&i.default.contains(a,t.target))){var d=i.default.Event(K,u);i.default(a).trigger(d),d.isDefaultPrevented()||("ontouchstart"in document.documentElement&&i.default(document.body).children().off("mouseover",null,i.default.noop),r[n].setAttribute("aria-expanded","false"),s._popper&&s._popper.destroy(),i.default(l).removeClass(ne),i.default(a).removeClass(ne).trigger(i.default.Event(X,u)))}}}},e._getParentFromElement=function(e){var t,r=c.getSelectorFromElement(e);return r&&(t=document.querySelector(r)),t||e.parentNode},e._dataApiKeydownHandler=function(t){if(!(/input|textarea/i.test(t.target.tagName)?32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||i.default(t.target).closest(ae).length):!J.test(t.which))&&!this.disabled&&!i.default(this).hasClass(re)){var r=e._getParentFromElement(this),n=i.default(r).hasClass(ne);if(n||27!==t.which){if(t.preventDefault(),t.stopPropagation(),!n||27===t.which||32===t.which)return 27===t.which&&i.default(r.querySelector(oe)).trigger("focus"),void i.default(this).trigger("click");var o=[].slice.call(r.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)")).filter((function(e){return i.default(e).is(":visible")}));if(0!==o.length){var a=o.indexOf(t.target);38===t.which&&a>0&&a--,40===t.which&&a<o.length-1&&a++,a<0&&(a=0),o[a].focus()}}}},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return se}},{key:"DefaultType",get:function(){return ue}}]),e}();i.default(document).on(te,oe,le._dataApiKeydownHandler).on(te,ae,le._dataApiKeydownHandler).on(ee+" keyup.bs.dropdown.data-api",le._clearMenus).on(ee,oe,(function(e){e.preventDefault(),e.stopPropagation(),le._jQueryInterface.call(i.default(this),"toggle")})).on(ee,".dropdown form",(function(e){e.stopPropagation()})),i.default.fn[Z]=le._jQueryInterface,i.default.fn[Z].Constructor=le,i.default.fn[Z].noConflict=function(){return i.default.fn[Z]=Y,le._jQueryInterface};var de="modal",ce="bs.modal",fe=".bs.modal",he=i.default.fn.modal,pe={backdrop:!0,keyboard:!0,focus:!0,show:!0},_e={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},me="hidden.bs.modal",ge="show.bs.modal",be="focusin.bs.modal",ve="resize.bs.modal",ye="click.dismiss.bs.modal",we="keydown.dismiss.bs.modal",ke="mousedown.dismiss.bs.modal",Ce="modal-open",Ee="fade",xe="show",Ae="modal-static",De=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Te=".sticky-top",Se=function(){function e(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(".modal-dialog"),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var t=e.prototype;return t.toggle=function(e){return this._isShown?this.hide():this.show(e)},t.show=function(e){var t=this;if(!this._isShown&&!this._isTransitioning){i.default(this._element).hasClass(Ee)&&(this._isTransitioning=!0);var r=i.default.Event(ge,{relatedTarget:e});i.default(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),i.default(this._element).on(ye,'[data-dismiss="modal"]',(function(e){return t.hide(e)})),i.default(this._dialog).on(ke,(function(){i.default(t._element).one("mouseup.dismiss.bs.modal",(function(e){i.default(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return t._showElement(e)})))}},t.hide=function(e){var t=this;if(e&&e.preventDefault(),this._isShown&&!this._isTransitioning){var r=i.default.Event("hide.bs.modal");if(i.default(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var n=i.default(this._element).hasClass(Ee);if(n&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),i.default(document).off(be),i.default(this._element).removeClass(xe),i.default(this._element).off(ye),i.default(this._dialog).off(ke),n){var o=c.getTransitionDurationFromElement(this._element);i.default(this._element).one(c.TRANSITION_END,(function(e){return t._hideModal(e)})).emulateTransitionEnd(o)}else this._hideModal()}}},t.dispose=function(){[window,this._element,this._dialog].forEach((function(e){return i.default(e).off(fe)})),i.default(document).off(be),i.default.removeData(this._element,ce),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(e){return e=u({},pe,e),c.typeCheckConfig(de,e,_e),e},t._triggerBackdropTransition=function(){var e=this;if("static"===this._config.backdrop){var t=i.default.Event("hidePrevented.bs.modal");if(i.default(this._element).trigger(t),t.isDefaultPrevented())return;var r=this._element.scrollHeight>document.documentElement.clientHeight;r||(this._element.style.overflowY="hidden"),this._element.classList.add(Ae);var n=c.getTransitionDurationFromElement(this._dialog);i.default(this._element).off(c.TRANSITION_END),i.default(this._element).one(c.TRANSITION_END,(function(){e._element.classList.remove(Ae),r||i.default(e._element).one(c.TRANSITION_END,(function(){e._element.style.overflowY=""})).emulateTransitionEnd(e._element,n)})).emulateTransitionEnd(n),this._element.focus()}else this.hide()},t._showElement=function(e){var t=this,r=i.default(this._element).hasClass(Ee),n=this._dialog?this._dialog.querySelector(".modal-body"):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),i.default(this._dialog).hasClass("modal-dialog-scrollable")&&n?n.scrollTop=0:this._element.scrollTop=0,r&&c.reflow(this._element),i.default(this._element).addClass(xe),this._config.focus&&this._enforceFocus();var o=i.default.Event("shown.bs.modal",{relatedTarget:e}),a=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,i.default(t._element).trigger(o)};if(r){var s=c.getTransitionDurationFromElement(this._dialog);i.default(this._dialog).one(c.TRANSITION_END,a).emulateTransitionEnd(s)}else a()},t._enforceFocus=function(){var e=this;i.default(document).off(be).on(be,(function(t){document!==t.target&&e._element!==t.target&&0===i.default(e._element).has(t.target).length&&e._element.focus()}))},t._setEscapeEvent=function(){var e=this;this._isShown?i.default(this._element).on(we,(function(t){e._config.keyboard&&27===t.which?(t.preventDefault(),e.hide()):e._config.keyboard||27!==t.which||e._triggerBackdropTransition()})):this._isShown||i.default(this._element).off(we)},t._setResizeEvent=function(){var e=this;this._isShown?i.default(window).on(ve,(function(t){return e.handleUpdate(t)})):i.default(window).off(ve)},t._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._showBackdrop((function(){i.default(document.body).removeClass(Ce),e._resetAdjustments(),e._resetScrollbar(),i.default(e._element).trigger(me)}))},t._removeBackdrop=function(){this._backdrop&&(i.default(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(e){var t=this,r=i.default(this._element).hasClass(Ee)?Ee:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",r&&this._backdrop.classList.add(r),i.default(this._backdrop).appendTo(document.body),i.default(this._element).on(ye,(function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&t._triggerBackdropTransition()})),r&&c.reflow(this._backdrop),i.default(this._backdrop).addClass(xe),!e)return;if(!r)return void e();var n=c.getTransitionDurationFromElement(this._backdrop);i.default(this._backdrop).one(c.TRANSITION_END,e).emulateTransitionEnd(n)}else if(!this._isShown&&this._backdrop){i.default(this._backdrop).removeClass(xe);var o=function(){t._removeBackdrop(),e&&e()};if(i.default(this._element).hasClass(Ee)){var a=c.getTransitionDurationFromElement(this._backdrop);i.default(this._backdrop).one(c.TRANSITION_END,o).emulateTransitionEnd(a)}else o()}else e&&e()},t._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=Math.round(e.left+e.right)<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var t=[].slice.call(document.querySelectorAll(De)),r=[].slice.call(document.querySelectorAll(Te));i.default(t).each((function(t,r){var n=r.style.paddingRight,o=i.default(r).css("padding-right");i.default(r).data("padding-right",n).css("padding-right",parseFloat(o)+e._scrollbarWidth+"px")})),i.default(r).each((function(t,r){var n=r.style.marginRight,o=i.default(r).css("margin-right");i.default(r).data("margin-right",n).css("margin-right",parseFloat(o)-e._scrollbarWidth+"px")}));var n=document.body.style.paddingRight,o=i.default(document.body).css("padding-right");i.default(document.body).data("padding-right",n).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}i.default(document.body).addClass(Ce)},t._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(De));i.default(e).each((function(e,t){var r=i.default(t).data("padding-right");i.default(t).removeData("padding-right"),t.style.paddingRight=r||""}));var t=[].slice.call(document.querySelectorAll(".sticky-top"));i.default(t).each((function(e,t){var r=i.default(t).data("margin-right");void 0!==r&&i.default(t).css("margin-right",r).removeData("margin-right")}));var r=i.default(document.body).data("padding-right");i.default(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},t._getScrollbarWidth=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},e._jQueryInterface=function(t,r){return this.each((function(){var n=i.default(this).data(ce),o=u({},pe,i.default(this).data(),"object"==typeof t&&t?t:{});if(n||(n=new e(this,o),i.default(this).data(ce,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t](r)}else o.show&&n.show(r)}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return pe}}]),e}();i.default(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',(function(e){var t,r=this,n=c.getSelectorFromElement(this);n&&(t=document.querySelector(n));var o=i.default(t).data(ce)?"toggle":u({},i.default(t).data(),i.default(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var a=i.default(t).one(ge,(function(e){e.isDefaultPrevented()||a.one(me,(function(){i.default(r).is(":visible")&&r.focus()}))}));Se._jQueryInterface.call(i.default(t),o,this)})),i.default.fn.modal=Se._jQueryInterface,i.default.fn.modal.Constructor=Se,i.default.fn.modal.noConflict=function(){return i.default.fn.modal=he,Se._jQueryInterface};var qe=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],Ne=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,Fe=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;function Ie(e,t,r){if(0===e.length)return e;if(r&&"function"==typeof r)return r(e);for(var n=(new window.DOMParser).parseFromString(e,"text/html"),i=Object.keys(t),o=[].slice.call(n.body.querySelectorAll("*")),a=function(e,r){var n=o[e],a=n.nodeName.toLowerCase();if(-1===i.indexOf(n.nodeName.toLowerCase()))return n.parentNode.removeChild(n),"continue";var s=[].slice.call(n.attributes),u=[].concat(t["*"]||[],t[a]||[]);s.forEach((function(e){(function(e,t){var r=e.nodeName.toLowerCase();if(-1!==t.indexOf(r))return-1===qe.indexOf(r)||Boolean(e.nodeValue.match(Ne)||e.nodeValue.match(Fe));for(var n=t.filter((function(e){return e instanceof RegExp})),i=0,o=n.length;i<o;i++)if(r.match(n[i]))return!0;return!1})(e,u)||n.removeAttribute(e.nodeName)}))},s=0,u=o.length;s<u;s++)a(s);return n.body.innerHTML}var Le="tooltip",Oe="bs.tooltip",ze=".bs.tooltip",je=i.default.fn.tooltip,Re=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Me=["sanitize","whiteList","sanitizeFn"],Pe={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},Be={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},He={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},Ue="show",Ve="out",$e={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},We="fade",Ze="show",Qe="hover",Ge="focus",Ye=function(){function e(e,t){if(void 0===o.default)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var t=e.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(e){if(this._isEnabled)if(e){var t=this.constructor.DATA_KEY,r=i.default(e.currentTarget).data(t);r||(r=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(t,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(i.default(this.getTipElement()).hasClass(Ze))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),i.default.removeData(this.element,this.constructor.DATA_KEY),i.default(this.element).off(this.constructor.EVENT_KEY),i.default(this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&i.default(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if("none"===i.default(this.element).css("display"))throw new Error("Please use show on visible elements");var t=i.default.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){i.default(this.element).trigger(t);var r=c.findShadowRoot(this.element),n=i.default.contains(null!==r?r:this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!n)return;var a=this.getTipElement(),s=c.getUID(this.constructor.NAME);a.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&i.default(a).addClass(We);var u="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,l=this._getAttachment(u);this.addAttachmentClass(l);var d=this._getContainer();i.default(a).data(this.constructor.DATA_KEY,this),i.default.contains(this.element.ownerDocument.documentElement,this.tip)||i.default(a).appendTo(d),i.default(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new o.default(this.element,a,this._getPopperConfig(l)),i.default(a).addClass(Ze),"ontouchstart"in document.documentElement&&i.default(document.body).children().on("mouseover",null,i.default.noop);var f=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,i.default(e.element).trigger(e.constructor.Event.SHOWN),t===Ve&&e._leave(null,e)};if(i.default(this.tip).hasClass(We)){var h=c.getTransitionDurationFromElement(this.tip);i.default(this.tip).one(c.TRANSITION_END,f).emulateTransitionEnd(h)}else f()}},t.hide=function(e){var t=this,r=this.getTipElement(),n=i.default.Event(this.constructor.Event.HIDE),o=function(){t._hoverState!==Ue&&r.parentNode&&r.parentNode.removeChild(r),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),i.default(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),e&&e()};if(i.default(this.element).trigger(n),!n.isDefaultPrevented()){if(i.default(r).removeClass(Ze),"ontouchstart"in document.documentElement&&i.default(document.body).children().off("mouseover",null,i.default.noop),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,i.default(this.tip).hasClass(We)){var a=c.getTransitionDurationFromElement(r);i.default(r).one(c.TRANSITION_END,o).emulateTransitionEnd(a)}else o();this._hoverState=""}},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(e){i.default(this.getTipElement()).addClass("bs-tooltip-"+e)},t.getTipElement=function(){return this.tip=this.tip||i.default(this.config.template)[0],this.tip},t.setContent=function(){var e=this.getTipElement();this.setElementContent(i.default(e.querySelectorAll(".tooltip-inner")),this.getTitle()),i.default(e).removeClass("fade show")},t.setElementContent=function(e,t){"object"!=typeof t||!t.nodeType&&!t.jquery?this.config.html?(this.config.sanitize&&(t=Ie(t,this.config.whiteList,this.config.sanitizeFn)),e.html(t)):e.text(t):this.config.html?i.default(t).parent().is(e)||e.empty().append(t):e.text(i.default(t).text())},t.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},t._getPopperConfig=function(e){var t=this;return u({},{placement:e,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}},this.config.popperConfig)},t._getOffset=function(){var e=this,t={};return"function"==typeof this.config.offset?t.fn=function(t){return t.offsets=u({},t.offsets,e.config.offset(t.offsets,e.element)||{}),t}:t.offset=this.config.offset,t},t._getContainer=function(){return!1===this.config.container?document.body:c.isElement(this.config.container)?i.default(this.config.container):i.default(document).find(this.config.container)},t._getAttachment=function(e){return Be[e.toUpperCase()]},t._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach((function(t){if("click"===t)i.default(e.element).on(e.constructor.Event.CLICK,e.config.selector,(function(t){return e.toggle(t)}));else if("manual"!==t){var r=t===Qe?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,n=t===Qe?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;i.default(e.element).on(r,e.config.selector,(function(t){return e._enter(t)})).on(n,e.config.selector,(function(t){return e._leave(t)}))}})),this._hideModalHandler=function(){e.element&&e.hide()},i.default(this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=u({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(e,t){var r=this.constructor.DATA_KEY;(t=t||i.default(e.currentTarget).data(r))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(r,t)),e&&(t._activeTrigger["focusin"===e.type?Ge:Qe]=!0),i.default(t.getTipElement()).hasClass(Ze)||t._hoverState===Ue?t._hoverState=Ue:(clearTimeout(t._timeout),t._hoverState=Ue,t.config.delay&&t.config.delay.show?t._timeout=setTimeout((function(){t._hoverState===Ue&&t.show()}),t.config.delay.show):t.show())},t._leave=function(e,t){var r=this.constructor.DATA_KEY;(t=t||i.default(e.currentTarget).data(r))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(r,t)),e&&(t._activeTrigger["focusout"===e.type?Ge:Qe]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=Ve,t.config.delay&&t.config.delay.hide?t._timeout=setTimeout((function(){t._hoverState===Ve&&t.hide()}),t.config.delay.hide):t.hide())},t._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},t._getConfig=function(e){var t=i.default(this.element).data();return Object.keys(t).forEach((function(e){-1!==Me.indexOf(e)&&delete t[e]})),"number"==typeof(e=u({},this.constructor.Default,t,"object"==typeof e&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),c.typeCheckConfig(Le,e,this.constructor.DefaultType),e.sanitize&&(e.template=Ie(e.template,e.whiteList,e.sanitizeFn)),e},t._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},t._cleanTipClass=function(){var e=i.default(this.getTipElement()),t=e.attr("class").match(Re);null!==t&&t.length&&e.removeClass(t.join(""))},t._handlePopperPlacementChange=function(e){this.tip=e.instance.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},t._fixTransition=function(){var e=this.getTipElement(),t=this.config.animation;null===e.getAttribute("x-placement")&&(i.default(e).removeClass(We),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},e._jQueryInterface=function(t){return this.each((function(){var r=i.default(this),n=r.data(Oe),o="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new e(this,o),r.data(Oe,n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return He}},{key:"NAME",get:function(){return Le}},{key:"DATA_KEY",get:function(){return Oe}},{key:"Event",get:function(){return $e}},{key:"EVENT_KEY",get:function(){return ze}},{key:"DefaultType",get:function(){return Pe}}]),e}();i.default.fn.tooltip=Ye._jQueryInterface,i.default.fn.tooltip.Constructor=Ye,i.default.fn.tooltip.noConflict=function(){return i.default.fn.tooltip=je,Ye._jQueryInterface};var Je="popover",Ke="bs.popover",Xe=".bs.popover",et=i.default.fn.popover,tt=new RegExp("(^|\\s)bs-popover\\S+","g"),rt=u({},Ye.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),nt=u({},Ye.DefaultType,{content:"(string|element|function)"}),it={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},ot=function(e){function t(){return e.apply(this,arguments)||this}var r,n;n=e,(r=t).prototype=Object.create(n.prototype),r.prototype.constructor=r,r.__proto__=n;var o=t.prototype;return o.isWithContent=function(){return this.getTitle()||this._getContent()},o.addAttachmentClass=function(e){i.default(this.getTipElement()).addClass("bs-popover-"+e)},o.getTipElement=function(){return this.tip=this.tip||i.default(this.config.template)[0],this.tip},o.setContent=function(){var e=i.default(this.getTipElement());this.setElementContent(e.find(".popover-header"),this.getTitle());var t=this._getContent();"function"==typeof t&&(t=t.call(this.element)),this.setElementContent(e.find(".popover-body"),t),e.removeClass("fade show")},o._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},o._cleanTipClass=function(){var e=i.default(this.getTipElement()),t=e.attr("class").match(tt);null!==t&&t.length>0&&e.removeClass(t.join(""))},t._jQueryInterface=function(e){return this.each((function(){var r=i.default(this).data(Ke),n="object"==typeof e?e:null;if((r||!/dispose|hide/.test(e))&&(r||(r=new t(this,n),i.default(this).data(Ke,r)),"string"==typeof e)){if(void 0===r[e])throw new TypeError('No method named "'+e+'"');r[e]()}}))},s(t,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return rt}},{key:"NAME",get:function(){return Je}},{key:"DATA_KEY",get:function(){return Ke}},{key:"Event",get:function(){return it}},{key:"EVENT_KEY",get:function(){return Xe}},{key:"DefaultType",get:function(){return nt}}]),t}(Ye);i.default.fn.popover=ot._jQueryInterface,i.default.fn.popover.Constructor=ot,i.default.fn.popover.noConflict=function(){return i.default.fn.popover=et,ot._jQueryInterface};var at="scrollspy",st="bs.scrollspy",ut="."+st,lt=i.default.fn[at],dt={offset:10,method:"auto",target:""},ct={offset:"number",method:"string",target:"(string|element)"},ft="active",ht=".nav, .list-group",pt=".nav-link",_t="position",mt=function(){function e(e,t){var r=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(t),this._selector=this._config.target+" "+".nav-link,"+this._config.target+" "+".list-group-item,"+this._config.target+" .dropdown-item",this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,i.default(this._scrollElement).on("scroll.bs.scrollspy",(function(e){return r._process(e)})),this.refresh(),this._process()}var t=e.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":_t,r="auto"===this._config.method?t:this._config.method,n=r===_t?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(e){var t,o=c.getSelectorFromElement(e);if(o&&(t=document.querySelector(o)),t){var a=t.getBoundingClientRect();if(a.width||a.height)return[i.default(t)[r]().top+n,o]}return null})).filter((function(e){return e})).sort((function(e,t){return e[0]-t[0]})).forEach((function(t){e._offsets.push(t[0]),e._targets.push(t[1])}))},t.dispose=function(){i.default.removeData(this._element,st),i.default(this._scrollElement).off(ut),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(e){if("string"!=typeof(e=u({},dt,"object"==typeof e&&e?e:{})).target&&c.isElement(e.target)){var t=i.default(e.target).attr("id");t||(t=c.getUID(at),i.default(e.target).attr("id",t)),e.target="#"+t}return c.typeCheckConfig(at,e,ct),e},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),r=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=r){var n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1])&&this._activate(this._targets[i])}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",").map((function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'})),r=i.default([].slice.call(document.querySelectorAll(t.join(","))));r.hasClass("dropdown-item")?(r.closest(".dropdown").find(".dropdown-toggle").addClass(ft),r.addClass(ft)):(r.addClass(ft),r.parents(ht).prev(".nav-link, .list-group-item").addClass(ft),r.parents(ht).prev(".nav-item").children(pt).addClass(ft)),i.default(this._scrollElement).trigger("activate.bs.scrollspy",{relatedTarget:e})},t._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(e){return e.classList.contains(ft)})).forEach((function(e){return e.classList.remove(ft)}))},e._jQueryInterface=function(t){return this.each((function(){var r=i.default(this).data(st);if(r||(r=new e(this,"object"==typeof t&&t),i.default(this).data(st,r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return dt}}]),e}();i.default(window).on("load.bs.scrollspy.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-spy="scroll"]')),t=e.length;t--;){var r=i.default(e[t]);mt._jQueryInterface.call(r,r.data())}})),i.default.fn[at]=mt._jQueryInterface,i.default.fn[at].Constructor=mt,i.default.fn[at].noConflict=function(){return i.default.fn[at]=lt,mt._jQueryInterface};var gt="bs.tab",bt=i.default.fn.tab,vt="active",yt="fade",wt="show",kt=".active",Ct="> li > .active",Et=function(){function e(e){this._element=e}var t=e.prototype;return t.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&i.default(this._element).hasClass(vt)||i.default(this._element).hasClass("disabled"))){var t,r,n=i.default(this._element).closest(".nav, .list-group")[0],o=c.getSelectorFromElement(this._element);if(n){var a="UL"===n.nodeName||"OL"===n.nodeName?Ct:kt;r=(r=i.default.makeArray(i.default(n).find(a)))[r.length-1]}var s=i.default.Event("hide.bs.tab",{relatedTarget:this._element}),u=i.default.Event("show.bs.tab",{relatedTarget:r});if(r&&i.default(r).trigger(s),i.default(this._element).trigger(u),!u.isDefaultPrevented()&&!s.isDefaultPrevented()){o&&(t=document.querySelector(o)),this._activate(this._element,n);var l=function(){var t=i.default.Event("hidden.bs.tab",{relatedTarget:e._element}),n=i.default.Event("shown.bs.tab",{relatedTarget:r});i.default(r).trigger(t),i.default(e._element).trigger(n)};t?this._activate(t,t.parentNode,l):l()}}},t.dispose=function(){i.default.removeData(this._element,gt),this._element=null},t._activate=function(e,t,r){var n=this,o=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?i.default(t).children(kt):i.default(t).find(Ct))[0],a=r&&o&&i.default(o).hasClass(yt),s=function(){return n._transitionComplete(e,o,r)};if(o&&a){var u=c.getTransitionDurationFromElement(o);i.default(o).removeClass(wt).one(c.TRANSITION_END,s).emulateTransitionEnd(u)}else s()},t._transitionComplete=function(e,t,r){if(t){i.default(t).removeClass(vt);var n=i.default(t.parentNode).find("> .dropdown-menu .active")[0];n&&i.default(n).removeClass(vt),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(i.default(e).addClass(vt),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),c.reflow(e),e.classList.contains(yt)&&e.classList.add(wt),e.parentNode&&i.default(e.parentNode).hasClass("dropdown-menu")){var o=i.default(e).closest(".dropdown")[0];if(o){var a=[].slice.call(o.querySelectorAll(".dropdown-toggle"));i.default(a).addClass(vt)}e.setAttribute("aria-expanded",!0)}r&&r()},e._jQueryInterface=function(t){return this.each((function(){var r=i.default(this),n=r.data(gt);if(n||(n=new e(this),r.data(gt,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}}]),e}();i.default(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',(function(e){e.preventDefault(),Et._jQueryInterface.call(i.default(this),"show")})),i.default.fn.tab=Et._jQueryInterface,i.default.fn.tab.Constructor=Et,i.default.fn.tab.noConflict=function(){return i.default.fn.tab=bt,Et._jQueryInterface};var xt="toast",At="bs.toast",Dt=i.default.fn.toast,Tt="click.dismiss.bs.toast",St="hide",qt="show",Nt="showing",Ft={animation:"boolean",autohide:"boolean",delay:"number"},It={animation:!0,autohide:!0,delay:500},Lt=function(){function e(e,t){this._element=e,this._config=this._getConfig(t),this._timeout=null,this._setListeners()}var t=e.prototype;return t.show=function(){var e=this,t=i.default.Event("show.bs.toast");if(i.default(this._element).trigger(t),!t.isDefaultPrevented()){this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");var r=function(){e._element.classList.remove(Nt),e._element.classList.add(qt),i.default(e._element).trigger("shown.bs.toast"),e._config.autohide&&(e._timeout=setTimeout((function(){e.hide()}),e._config.delay))};if(this._element.classList.remove(St),c.reflow(this._element),this._element.classList.add(Nt),this._config.animation){var n=c.getTransitionDurationFromElement(this._element);i.default(this._element).one(c.TRANSITION_END,r).emulateTransitionEnd(n)}else r()}},t.hide=function(){if(this._element.classList.contains(qt)){var e=i.default.Event("hide.bs.toast");i.default(this._element).trigger(e),e.isDefaultPrevented()||this._close()}},t.dispose=function(){this._clearTimeout(),this._element.classList.contains(qt)&&this._element.classList.remove(qt),i.default(this._element).off(Tt),i.default.removeData(this._element,At),this._element=null,this._config=null},t._getConfig=function(e){return e=u({},It,i.default(this._element).data(),"object"==typeof e&&e?e:{}),c.typeCheckConfig(xt,e,this.constructor.DefaultType),e},t._setListeners=function(){var e=this;i.default(this._element).on(Tt,'[data-dismiss="toast"]',(function(){return e.hide()}))},t._close=function(){var e=this,t=function(){e._element.classList.add(St),i.default(e._element).trigger("hidden.bs.toast")};if(this._element.classList.remove(qt),this._config.animation){var r=c.getTransitionDurationFromElement(this._element);i.default(this._element).one(c.TRANSITION_END,t).emulateTransitionEnd(r)}else t()},t._clearTimeout=function(){clearTimeout(this._timeout),this._timeout=null},e._jQueryInterface=function(t){return this.each((function(){var r=i.default(this),n=r.data(At);if(n||(n=new e(this,"object"==typeof t&&t),r.data(At,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t](this)}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"DefaultType",get:function(){return Ft}},{key:"Default",get:function(){return It}}]),e}();i.default.fn.toast=Lt._jQueryInterface,i.default.fn.toast.Constructor=Lt,i.default.fn.toast.noConflict=function(){return i.default.fn.toast=Dt,Lt._jQueryInterface},e.Alert=p,e.Button=w,e.Carousel=L,e.Collapse=W,e.Dropdown=le,e.Modal=Se,e.Popover=ot,e.Scrollspy=mt,e.Tab=Et,e.Toast=Lt,e.Tooltip=Ye,e.Util=c,Object.defineProperty(e,"__esModule",{value:!0})}(t,r(3609),r(5276))},2485:(e,t,r)=>{"use strict";function n(e){var t=Array.prototype.slice.call(arguments,1);return t.forEach((function(t){t&&Object.keys(t).forEach((function(r){e[r]=t[r]}))})),e}function i(e){return Object.prototype.toString.call(e)}function o(e){return"[object Function]"===i(e)}function a(e){return e.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var s={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1},u={"http:":{validate:function(e,t,r){var n=e.slice(t);return r.re.http||(r.re.http=new RegExp("^\\/\\/"+r.re.src_auth+r.re.src_host_port_strict+r.re.src_path,"i")),r.re.http.test(n)?n.match(r.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(e,t,r){var n=e.slice(t);return r.re.no_http||(r.re.no_http=new RegExp("^"+r.re.src_auth+"(?:localhost|(?:(?:"+r.re.src_domain+")\\.)+"+r.re.src_domain_root+")"+r.re.src_port+r.re.src_host_terminator+r.re.src_path,"i")),r.re.no_http.test(n)?t>=3&&":"===e[t-3]||t>=3&&"/"===e[t-3]?0:n.match(r.re.no_http)[0].length:0}},"mailto:":{validate:function(e,t,r){var n=e.slice(t);return r.re.mailto||(r.re.mailto=new RegExp("^"+r.re.src_email_name+"@"+r.re.src_host_strict,"i")),r.re.mailto.test(n)?n.match(r.re.mailto)[0].length:0}}},l="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function d(e){var t=e.re=r(8465)(e.__opts__),n=e.__tlds__.slice();function s(e){return e.replace("%TLDS%",t.src_tlds)}e.onCompile(),e.__tlds_replaced__||n.push("a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]"),n.push(t.src_xn),t.src_tlds=n.join("|"),t.email_fuzzy=RegExp(s(t.tpl_email_fuzzy),"i"),t.link_fuzzy=RegExp(s(t.tpl_link_fuzzy),"i"),t.link_no_ip_fuzzy=RegExp(s(t.tpl_link_no_ip_fuzzy),"i"),t.host_fuzzy_test=RegExp(s(t.tpl_host_fuzzy_test),"i");var u=[];function l(e,t){throw new Error('(LinkifyIt) Invalid schema "'+e+'": '+t)}e.__compiled__={},Object.keys(e.__schemas__).forEach((function(t){var r=e.__schemas__[t];if(null!==r){var n={validate:null,link:null};if(e.__compiled__[t]=n,"[object Object]"===i(r))return"[object RegExp]"!==i(r.validate)?o(r.validate)?n.validate=r.validate:l(t,r):n.validate=function(e){return function(t,r){var n=t.slice(r);return e.test(n)?n.match(e)[0].length:0}}(r.validate),void(o(r.normalize)?n.normalize=r.normalize:r.normalize?l(t,r):n.normalize=function(e,t){t.normalize(e)});!function(e){return"[object String]"===i(e)}(r)?l(t,r):u.push(t)}})),u.forEach((function(t){e.__compiled__[e.__schemas__[t]]&&(e.__compiled__[t].validate=e.__compiled__[e.__schemas__[t]].validate,e.__compiled__[t].normalize=e.__compiled__[e.__schemas__[t]].normalize)})),e.__compiled__[""]={validate:null,normalize:function(e,t){t.normalize(e)}};var d=Object.keys(e.__compiled__).filter((function(t){return t.length>0&&e.__compiled__[t]})).map(a).join("|");e.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+d+")","i"),e.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+d+")","ig"),e.re.pretest=RegExp("("+e.re.schema_test.source+")|("+e.re.host_fuzzy_test.source+")|@","i"),function(e){e.__index__=-1,e.__text_cache__=""}(e)}function c(e,t){var r=e.__index__,n=e.__last_index__,i=e.__text_cache__.slice(r,n);this.schema=e.__schema__.toLowerCase(),this.index=r+t,this.lastIndex=n+t,this.raw=i,this.text=i,this.url=i}function f(e,t){var r=new c(e,t);return e.__compiled__[r.schema].normalize(r,e),r}function h(e,t){if(!(this instanceof h))return new h(e,t);var r;t||(r=e,Object.keys(r||{}).reduce((function(e,t){return e||s.hasOwnProperty(t)}),!1)&&(t=e,e={})),this.__opts__=n({},s,t),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=n({},u,e),this.__compiled__={},this.__tlds__=l,this.__tlds_replaced__=!1,this.re={},d(this)}h.prototype.add=function(e,t){return this.__schemas__[e]=t,d(this),this},h.prototype.set=function(e){return this.__opts__=n(this.__opts__,e),this},h.prototype.test=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return!1;var t,r,n,i,o,a,s,u;if(this.re.schema_test.test(e))for((s=this.re.schema_search).lastIndex=0;null!==(t=s.exec(e));)if(i=this.testSchemaAt(e,t[2],s.lastIndex)){this.__schema__=t[2],this.__index__=t.index+t[1].length,this.__last_index__=t.index+t[0].length+i;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(u=e.search(this.re.host_fuzzy_test))>=0&&(this.__index__<0||u<this.__index__)&&null!==(r=e.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(o=r.index+r[1].length,(this.__index__<0||o<this.__index__)&&(this.__schema__="",this.__index__=o,this.__last_index__=r.index+r[0].length)),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&e.indexOf("@")>=0&&null!==(n=e.match(this.re.email_fuzzy))&&(o=n.index+n[1].length,a=n.index+n[0].length,(this.__index__<0||o<this.__index__||o===this.__index__&&a>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=o,this.__last_index__=a)),this.__index__>=0},h.prototype.pretest=function(e){return this.re.pretest.test(e)},h.prototype.testSchemaAt=function(e,t,r){return this.__compiled__[t.toLowerCase()]?this.__compiled__[t.toLowerCase()].validate(e,r,this):0},h.prototype.match=function(e){var t=0,r=[];this.__index__>=0&&this.__text_cache__===e&&(r.push(f(this,t)),t=this.__last_index__);for(var n=t?e.slice(t):e;this.test(n);)r.push(f(this,t)),n=n.slice(this.__last_index__),t+=this.__last_index__;return r.length?r:null},h.prototype.tlds=function(e,t){return e=Array.isArray(e)?e:[e],t?(this.__tlds__=this.__tlds__.concat(e).sort().filter((function(e,t,r){return e!==r[t-1]})).reverse(),d(this),this):(this.__tlds__=e.slice(),this.__tlds_replaced__=!0,d(this),this)},h.prototype.normalize=function(e){e.schema||(e.url="http://"+e.url),"mailto:"!==e.schema||/^mailto:/i.test(e.url)||(e.url="mailto:"+e.url)},h.prototype.onCompile=function(){},e.exports=h},8465:(e,t,r)=>{"use strict";e.exports=function(e){var t={};return t.src_Any=r(4604).source,t.src_Cc=r(8073).source,t.src_Z=r(6390).source,t.src_P=r(819).source,t.src_ZPCc=[t.src_Z,t.src_P,t.src_Cc].join("|"),t.src_ZCc=[t.src_Z,t.src_Cc].join("|"),t.src_pseudo_letter="(?:(?![><｜]|"+t.src_ZPCc+")"+t.src_Any+")",t.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",t.src_auth="(?:(?:(?!"+t.src_ZCc+"|[@/\\[\\]()]).)+@)?",t.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",t.src_host_terminator="(?=$|[><｜]|"+t.src_ZPCc+")(?!-|_|:\\d|\\.-|\\.(?!$|"+t.src_ZPCc+"))",t.src_path="(?:[/?#](?:(?!"+t.src_ZCc+"|[><｜]|[()[\\]{}.,\"'?!\\-]).|\\[(?:(?!"+t.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+t.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+t.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+t.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+t.src_ZCc+"|[']).)+\\'|\\'(?="+t.src_pseudo_letter+"|[-]).|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!"+t.src_ZCc+"|[.]).|"+(e&&e["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+"\\,(?!"+t.src_ZCc+").|\\!+(?!"+t.src_ZCc+"|[!]).|\\?(?!"+t.src_ZCc+"|[?]).)+|\\/)?",t.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',t.src_xn="xn--[a-z0-9\\-]{1,59}",t.src_domain_root="(?:"+t.src_xn+"|"+t.src_pseudo_letter+"{1,63})",t.src_domain="(?:"+t.src_xn+"|(?:"+t.src_pseudo_letter+")|(?:"+t.src_pseudo_letter+"(?:-|"+t.src_pseudo_letter+"){0,61}"+t.src_pseudo_letter+"))",t.src_host="(?:(?:(?:(?:"+t.src_domain+")\\.)*"+t.src_domain+"))",t.tpl_host_fuzzy="(?:"+t.src_ip4+"|(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%)))",t.tpl_host_no_ip_fuzzy="(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%))",t.src_host_strict=t.src_host+t.src_host_terminator,t.tpl_host_fuzzy_strict=t.tpl_host_fuzzy+t.src_host_terminator,t.src_host_port_strict=t.src_host+t.src_port+t.src_host_terminator,t.tpl_host_port_fuzzy_strict=t.tpl_host_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_port_no_ip_fuzzy_strict=t.tpl_host_no_ip_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+t.src_ZPCc+"|>|$))",t.tpl_email_fuzzy='(^|[><｜]|"|\\(|'+t.src_ZCc+")("+t.src_email_name+"@"+t.tpl_host_fuzzy_strict+")",t.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_fuzzy_strict+t.src_path+")",t.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_no_ip_fuzzy_strict+t.src_path+")",t}},4310:(e,t,r)=>{"use strict";var n=r(3258),i=r(9930),o=r(6941);e.exports=function(e,t){var r=o(e.utils.assign({},{defs:{},shortcuts:{},enabled:[]},t||{}));e.renderer.rules.emoji=n,e.core.ruler.push("emoji",i(e,r.defs,r.shortcuts,r.scanRE,r.replaceRE))}},9735:(e,t,r)=>{"use strict";var n=r(2550),i=r(219),o=r(4310);e.exports=function(e,t){var r={defs:n,shortcuts:i,enabled:[]},a=e.utils.assign({},r,t||{});o(e,a)}},219:e=>{"use strict";e.exports={angry:[">:(",">:-("],blush:[':")',':-")'],broken_heart:["</3","<\\3"],confused:[":/",":-/"],cry:[":'(",":'-(",":,(",":,-("],frowning:[":(",":-("],heart:["<3"],imp:["]:(","]:-("],innocent:["o:)","O:)","o:-)","O:-)","0:)","0:-)"],joy:[":')",":'-)",":,)",":,-)",":'D",":'-D",":,D",":,-D"],kissing:[":*",":-*"],laughing:["x-)","X-)"],neutral_face:[":|",":-|"],open_mouth:[":o",":-o",":O",":-O"],rage:[":@",":-@"],smile:[":D",":-D"],smiley:[":)",":-)"],smiling_imp:["]:)","]:-)"],sob:[":,'(",":,'-(",";(",";-("],stuck_out_tongue:[":P",":-P"],sunglasses:["8-)","B-)"],sweat:[",:(",",:-("],sweat_smile:[",:)",",:-)"],unamused:[":s",":-S",":z",":-Z",":$",":-$"],wink:[";)",";-)"]}},6941:e=>{"use strict";e.exports=function(e){var t,r=e.defs;e.enabled.length&&(r=Object.keys(r).reduce((function(t,n){return e.enabled.indexOf(n)>=0&&(t[n]=r[n]),t}),{})),t=Object.keys(e.shortcuts).reduce((function(t,n){return r[n]?Array.isArray(e.shortcuts[n])?(e.shortcuts[n].forEach((function(e){t[e]=n})),t):(t[e.shortcuts[n]]=n,t):t}),{});var n,i=Object.keys(r);n=0===i.length?"^$":i.map((function(e){return":"+e+":"})).concat(Object.keys(t)).sort().reverse().map((function(e){return e.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")})).join("|");var o=RegExp(n),a=RegExp(n,"g");return{defs:r,shortcuts:t,scanRE:o,replaceRE:a}}},3258:e=>{"use strict";e.exports=function(e,t){return e[t].content}},9930:e=>{"use strict";e.exports=function(e,t,r,n,i){var o=e.utils.arrayReplaceAt,a=e.utils.lib.ucmicro,s=new RegExp([a.Z.source,a.P.source,a.Cc.source].join("|"));function u(e,n,o){var a,u=0,l=[];return e.replace(i,(function(n,i,d){var c;if(r.hasOwnProperty(n)){if(c=r[n],i>0&&!s.test(d[i-1]))return;if(i+n.length<d.length&&!s.test(d[i+n.length]))return}else c=n.slice(1,-1);i>u&&((a=new o("text","",0)).content=e.slice(u,i),l.push(a)),(a=new o("emoji","",0)).markup=c,a.content=t[c],l.push(a),u=i+n.length})),u<e.length&&((a=new o("text","",0)).content=e.slice(u),l.push(a)),l}return function(e){var t,r,i,a,s,l=e.tokens,d=0;for(r=0,i=l.length;r<i;r++)if("inline"===l[r].type)for(t=(a=l[r].children).length-1;t>=0;t--)"link_open"!==(s=a[t]).type&&"link_close"!==s.type||"auto"===s.info&&(d-=s.nesting),"text"===s.type&&0===d&&n.test(s.content)&&(l[r].children=a=o(a,t,u(s.content,s.level,e.Token)))}}},6912:(e,t,r)=>{"use strict";e.exports=r(2802)},9017:(e,t,r)=>{"use strict";e.exports=r(4007)},2552:e=>{"use strict";e.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]},758:e=>{"use strict";var t="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",r="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",n=new RegExp("^(?:"+t+"|"+r+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?][\\s\\S]*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),i=new RegExp("^(?:"+t+"|"+r+")");e.exports.n=n,e.exports.q=i},6014:(e,t,r)=>{"use strict";var n=Object.prototype.hasOwnProperty;function i(e,t){return n.call(e,t)}function o(e){return!(e>=55296&&e<=57343||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)||e>=0&&e<=8||11===e||e>=14&&e<=31||e>=127&&e<=159||e>1114111)}function a(e){if(e>65535){var t=55296+((e-=65536)>>10),r=56320+(1023&e);return String.fromCharCode(t,r)}return String.fromCharCode(e)}var s=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,u=new RegExp(s.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),l=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,d=r(9017),c=/[&<>"]/,f=/[&<>"]/g,h={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function p(e){return h[e]}var _=/[.?*+^$[\]\\(){}|-]/g,m=r(819);t.lib={},t.lib.mdurl=r(802),t.lib.ucmicro=r(8059),t.assign=function(e){var t=Array.prototype.slice.call(arguments,1);return t.forEach((function(t){if(t){if("object"!=typeof t)throw new TypeError(t+"must be object");Object.keys(t).forEach((function(r){e[r]=t[r]}))}})),e},t.isString=function(e){return"[object String]"===function(e){return Object.prototype.toString.call(e)}(e)},t.has=i,t.unescapeMd=function(e){return e.indexOf("\\")<0?e:e.replace(s,"$1")},t.unescapeAll=function(e){return e.indexOf("\\")<0&&e.indexOf("&")<0?e:e.replace(u,(function(e,t,r){return t||function(e,t){var r=0;return i(d,t)?d[t]:35===t.charCodeAt(0)&&l.test(t)&&o(r="x"===t[1].toLowerCase()?parseInt(t.slice(2),16):parseInt(t.slice(1),10))?a(r):e}(e,r)}))},t.isValidEntityCode=o,t.fromCodePoint=a,t.escapeHtml=function(e){return c.test(e)?e.replace(f,p):e},t.arrayReplaceAt=function(e,t,r){return[].concat(e.slice(0,t),r,e.slice(t+1))},t.isSpace=function(e){switch(e){case 9:case 32:return!0}return!1},t.isWhiteSpace=function(e){if(e>=8192&&e<=8202)return!0;switch(e){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return!0}return!1},t.isMdAsciiPunct=function(e){switch(e){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return!0;default:return!1}},t.isPunctChar=function(e){return m.test(e)},t.escapeRE=function(e){return e.replace(_,"\\$&")},t.normalizeReference=function(e){return e=e.trim().replace(/\s+/g," "),"Ṿ"==="ẞ".toLowerCase()&&(e=e.replace(/ẞ/g,"ß")),e.toLowerCase().toUpperCase()}},5165:(e,t,r)=>{"use strict";t.parseLinkLabel=r(7291),t.parseLinkDestination=r(7346),t.parseLinkTitle=r(716)},7346:(e,t,r)=>{"use strict";var n=r(6014).unescapeAll;e.exports=function(e,t,r){var i,o,a=t,s={ok:!1,pos:0,lines:0,str:""};if(60===e.charCodeAt(t)){for(t++;t<r;){if(10===(i=e.charCodeAt(t)))return s;if(60===i)return s;if(62===i)return s.pos=t+1,s.str=n(e.slice(a+1,t)),s.ok=!0,s;92===i&&t+1<r?t+=2:t++}return s}for(o=0;t<r&&32!==(i=e.charCodeAt(t))&&!(i<32||127===i);)if(92===i&&t+1<r){if(32===e.charCodeAt(t+1))break;t+=2}else{if(40===i&&++o>32)return s;if(41===i){if(0===o)break;o--}t++}return a===t||0!==o||(s.str=n(e.slice(a,t)),s.lines=0,s.pos=t,s.ok=!0),s}},7291:e=>{"use strict";e.exports=function(e,t,r){var n,i,o,a,s=-1,u=e.posMax,l=e.pos;for(e.pos=t+1,n=1;e.pos<u;){if(93===(o=e.src.charCodeAt(e.pos))&&0==--n){i=!0;break}if(a=e.pos,e.md.inline.skipToken(e),91===o)if(a===e.pos-1)n++;else if(r)return e.pos=l,-1}return i&&(s=e.pos),e.pos=l,s}},716:(e,t,r)=>{"use strict";var n=r(6014).unescapeAll;e.exports=function(e,t,r){var i,o,a=0,s=t,u={ok:!1,pos:0,lines:0,str:""};if(t>=r)return u;if(34!==(o=e.charCodeAt(t))&&39!==o&&40!==o)return u;for(t++,40===o&&(o=41);t<r;){if((i=e.charCodeAt(t))===o)return u.pos=t+1,u.lines=a,u.str=n(e.slice(s+1,t)),u.ok=!0,u;if(40===i&&41===o)return u;10===i?a++:92===i&&t+1<r&&(t++,10===e.charCodeAt(t)&&a++),t++}return u}},2802:(e,t,r)=>{"use strict";var n=r(6014),i=r(5165),o=r(2461),a=r(1594),s=r(1701),u=r(9519),l=r(2485),d=r(802),c=r(9577),f={default:r(416),zero:r(1066),commonmark:r(5897)},h=/^(vbscript|javascript|file|data):/,p=/^data:image\/(gif|png|jpeg|webp);/;function _(e){var t=e.trim().toLowerCase();return!h.test(t)||!!p.test(t)}var m=["http:","https:","mailto:"];function g(e){var t=d.parse(e,!0);if(t.hostname&&(!t.protocol||m.indexOf(t.protocol)>=0))try{t.hostname=c.toASCII(t.hostname)}catch(e){}return d.encode(d.format(t))}function b(e){var t=d.parse(e,!0);if(t.hostname&&(!t.protocol||m.indexOf(t.protocol)>=0))try{t.hostname=c.toUnicode(t.hostname)}catch(e){}return d.decode(d.format(t),d.decode.defaultChars+"%")}function v(e,t){if(!(this instanceof v))return new v(e,t);t||n.isString(e)||(t=e||{},e="default"),this.inline=new u,this.block=new s,this.core=new a,this.renderer=new o,this.linkify=new l,this.validateLink=_,this.normalizeLink=g,this.normalizeLinkText=b,this.utils=n,this.helpers=n.assign({},i),this.options={},this.configure(e),t&&this.set(t)}v.prototype.set=function(e){return n.assign(this.options,e),this},v.prototype.configure=function(e){var t,r=this;if(n.isString(e)&&!(e=f[t=e]))throw new Error('Wrong `markdown-it` preset "'+t+'", check name');if(!e)throw new Error("Wrong `markdown-it` preset, can't be empty");return e.options&&r.set(e.options),e.components&&Object.keys(e.components).forEach((function(t){e.components[t].rules&&r[t].ruler.enableOnly(e.components[t].rules),e.components[t].rules2&&r[t].ruler2.enableOnly(e.components[t].rules2)})),this},v.prototype.enable=function(e,t){var r=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach((function(t){r=r.concat(this[t].ruler.enable(e,!0))}),this),r=r.concat(this.inline.ruler2.enable(e,!0));var n=e.filter((function(e){return r.indexOf(e)<0}));if(n.length&&!t)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+n);return this},v.prototype.disable=function(e,t){var r=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach((function(t){r=r.concat(this[t].ruler.disable(e,!0))}),this),r=r.concat(this.inline.ruler2.disable(e,!0));var n=e.filter((function(e){return r.indexOf(e)<0}));if(n.length&&!t)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+n);return this},v.prototype.use=function(e){var t=[this].concat(Array.prototype.slice.call(arguments,1));return e.apply(e,t),this},v.prototype.parse=function(e,t){if("string"!=typeof e)throw new Error("Input data should be a String");var r=new this.core.State(e,this,t);return this.core.process(r),r.tokens},v.prototype.render=function(e,t){return t=t||{},this.renderer.render(this.parse(e,t),this.options,t)},v.prototype.parseInline=function(e,t){var r=new this.core.State(e,this,t);return r.inlineMode=!0,this.core.process(r),r.tokens},v.prototype.renderInline=function(e,t){return t=t||{},this.renderer.render(this.parseInline(e,t),this.options,t)},e.exports=v},1701:(e,t,r)=>{"use strict";var n=r(300),i=[["table",r(4259),["paragraph","reference"]],["code",r(817)],["fence",r(5111),["paragraph","reference","blockquote","list"]],["blockquote",r(5005),["paragraph","reference","blockquote","list"]],["hr",r(4470),["paragraph","reference","blockquote","list"]],["list",r(9802),["paragraph","reference","blockquote"]],["reference",r(5008)],["heading",r(5115),["paragraph","reference","blockquote"]],["lheading",r(7609)],["html_block",r(9751),["paragraph","reference","blockquote"]],["paragraph",r(2583)]];function o(){this.ruler=new n;for(var e=0;e<i.length;e++)this.ruler.push(i[e][0],i[e][1],{alt:(i[e][2]||[]).slice()})}o.prototype.tokenize=function(e,t,r){for(var n,i=this.ruler.getRules(""),o=i.length,a=t,s=!1,u=e.md.options.maxNesting;a<r&&(e.line=a=e.skipEmptyLines(a),!(a>=r))&&!(e.sCount[a]<e.blkIndent);){if(e.level>=u){e.line=r;break}for(n=0;n<o&&!i[n](e,a,r,!1);n++);e.tight=!s,e.isEmpty(e.line-1)&&(s=!0),(a=e.line)<r&&e.isEmpty(a)&&(s=!0,a++,e.line=a)}},o.prototype.parse=function(e,t,r,n){var i;e&&(i=new this.State(e,t,r,n),this.tokenize(i,i.line,i.lineMax))},o.prototype.State=r(6357),e.exports=o},1594:(e,t,r)=>{"use strict";var n=r(300),i=[["normalize",r(1099)],["block",r(8765)],["inline",r(5003)],["linkify",r(1636)],["replacements",r(1403)],["smartquotes",r(8910)]];function o(){this.ruler=new n;for(var e=0;e<i.length;e++)this.ruler.push(i[e][0],i[e][1])}o.prototype.process=function(e){var t,r,n;for(t=0,r=(n=this.ruler.getRules("")).length;t<r;t++)n[t](e)},o.prototype.State=r(8799),e.exports=o},9519:(e,t,r)=>{"use strict";var n=r(300),i=[["text",r(3572)],["newline",r(8166)],["escape",r(4903)],["backticks",r(9149)],["strikethrough",r(4968).w],["emphasis",r(7857).w],["link",r(1216)],["image",r(6846)],["autolink",r(1996)],["html_inline",r(7320)],["entity",r(7662)]],o=[["balance_pairs",r(7982)],["strikethrough",r(4968).g],["emphasis",r(7857).g],["text_collapse",r(2305)]];function a(){var e;for(this.ruler=new n,e=0;e<i.length;e++)this.ruler.push(i[e][0],i[e][1]);for(this.ruler2=new n,e=0;e<o.length;e++)this.ruler2.push(o[e][0],o[e][1])}a.prototype.skipToken=function(e){var t,r,n=e.pos,i=this.ruler.getRules(""),o=i.length,a=e.md.options.maxNesting,s=e.cache;if(void 0===s[n]){if(e.level<a)for(r=0;r<o&&(e.level++,t=i[r](e,!0),e.level--,!t);r++);else e.pos=e.posMax;t||e.pos++,s[n]=e.pos}else e.pos=s[n]},a.prototype.tokenize=function(e){for(var t,r,n=this.ruler.getRules(""),i=n.length,o=e.posMax,a=e.md.options.maxNesting;e.pos<o;){if(e.level<a)for(r=0;r<i&&!(t=n[r](e,!1));r++);if(t){if(e.pos>=o)break}else e.pending+=e.src[e.pos++]}e.pending&&e.pushPending()},a.prototype.parse=function(e,t,r,n){var i,o,a,s=new this.State(e,t,r,n);for(this.tokenize(s),a=(o=this.ruler2.getRules("")).length,i=0;i<a;i++)o[i](s)},a.prototype.State=r(8650),e.exports=a},5897:e=>{"use strict";e.exports={options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","text_collapse"]}}}},416:e=>{"use strict";e.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}}},1066:e=>{"use strict";e.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","text_collapse"]}}}},2461:(e,t,r)=>{"use strict";var n=r(6014).assign,i=r(6014).unescapeAll,o=r(6014).escapeHtml,a={};function s(){this.rules=n({},a)}a.code_inline=function(e,t,r,n,i){var a=e[t];return"<code"+i.renderAttrs(a)+">"+o(e[t].content)+"</code>"},a.code_block=function(e,t,r,n,i){var a=e[t];return"<pre"+i.renderAttrs(a)+"><code>"+o(e[t].content)+"</code></pre>\n"},a.fence=function(e,t,r,n,a){var s,u,l,d,c,f=e[t],h=f.info?i(f.info).trim():"",p="",_="";return h&&(p=(l=h.split(/(\s+)/g))[0],_=l.slice(2).join("")),0===(s=r.highlight&&r.highlight(f.content,p,_)||o(f.content)).indexOf("<pre")?s+"\n":h?(u=f.attrIndex("class"),d=f.attrs?f.attrs.slice():[],u<0?d.push(["class",r.langPrefix+p]):(d[u]=d[u].slice(),d[u][1]+=" "+r.langPrefix+p),c={attrs:d},"<pre><code"+a.renderAttrs(c)+">"+s+"</code></pre>\n"):"<pre><code"+a.renderAttrs(f)+">"+s+"</code></pre>\n"},a.image=function(e,t,r,n,i){var o=e[t];return o.attrs[o.attrIndex("alt")][1]=i.renderInlineAsText(o.children,r,n),i.renderToken(e,t,r)},a.hardbreak=function(e,t,r){return r.xhtmlOut?"<br />\n":"<br>\n"},a.softbreak=function(e,t,r){return r.breaks?r.xhtmlOut?"<br />\n":"<br>\n":"\n"},a.text=function(e,t){return o(e[t].content)},a.html_block=function(e,t){return e[t].content},a.html_inline=function(e,t){return e[t].content},s.prototype.renderAttrs=function(e){var t,r,n;if(!e.attrs)return"";for(n="",t=0,r=e.attrs.length;t<r;t++)n+=" "+o(e.attrs[t][0])+'="'+o(e.attrs[t][1])+'"';return n},s.prototype.renderToken=function(e,t,r){var n,i="",o=!1,a=e[t];return a.hidden?"":(a.block&&-1!==a.nesting&&t&&e[t-1].hidden&&(i+="\n"),i+=(-1===a.nesting?"</":"<")+a.tag,i+=this.renderAttrs(a),0===a.nesting&&r.xhtmlOut&&(i+=" /"),a.block&&(o=!0,1===a.nesting&&t+1<e.length&&("inline"===(n=e[t+1]).type||n.hidden||-1===n.nesting&&n.tag===a.tag)&&(o=!1)),i+=o?">\n":">")},s.prototype.renderInline=function(e,t,r){for(var n,i="",o=this.rules,a=0,s=e.length;a<s;a++)void 0!==o[n=e[a].type]?i+=o[n](e,a,t,r,this):i+=this.renderToken(e,a,t);return i},s.prototype.renderInlineAsText=function(e,t,r){for(var n="",i=0,o=e.length;i<o;i++)"text"===e[i].type?n+=e[i].content:"image"===e[i].type&&(n+=this.renderInlineAsText(e[i].children,t,r));return n},s.prototype.render=function(e,t,r){var n,i,o,a="",s=this.rules;for(n=0,i=e.length;n<i;n++)"inline"===(o=e[n].type)?a+=this.renderInline(e[n].children,t,r):void 0!==s[o]?a+=s[e[n].type](e,n,t,r,this):a+=this.renderToken(e,n,t,r);return a},e.exports=s},300:e=>{"use strict";function t(){this.__rules__=[],this.__cache__=null}t.prototype.__find__=function(e){for(var t=0;t<this.__rules__.length;t++)if(this.__rules__[t].name===e)return t;return-1},t.prototype.__compile__=function(){var e=this,t=[""];e.__rules__.forEach((function(e){e.enabled&&e.alt.forEach((function(e){t.indexOf(e)<0&&t.push(e)}))})),e.__cache__={},t.forEach((function(t){e.__cache__[t]=[],e.__rules__.forEach((function(r){r.enabled&&(t&&r.alt.indexOf(t)<0||e.__cache__[t].push(r.fn))}))}))},t.prototype.at=function(e,t,r){var n=this.__find__(e),i=r||{};if(-1===n)throw new Error("Parser rule not found: "+e);this.__rules__[n].fn=t,this.__rules__[n].alt=i.alt||[],this.__cache__=null},t.prototype.before=function(e,t,r,n){var i=this.__find__(e),o=n||{};if(-1===i)throw new Error("Parser rule not found: "+e);this.__rules__.splice(i,0,{name:t,enabled:!0,fn:r,alt:o.alt||[]}),this.__cache__=null},t.prototype.after=function(e,t,r,n){var i=this.__find__(e),o=n||{};if(-1===i)throw new Error("Parser rule not found: "+e);this.__rules__.splice(i+1,0,{name:t,enabled:!0,fn:r,alt:o.alt||[]}),this.__cache__=null},t.prototype.push=function(e,t,r){var n=r||{};this.__rules__.push({name:e,enabled:!0,fn:t,alt:n.alt||[]}),this.__cache__=null},t.prototype.enable=function(e,t){Array.isArray(e)||(e=[e]);var r=[];return e.forEach((function(e){var n=this.__find__(e);if(n<0){if(t)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!0,r.push(e)}),this),this.__cache__=null,r},t.prototype.enableOnly=function(e,t){Array.isArray(e)||(e=[e]),this.__rules__.forEach((function(e){e.enabled=!1})),this.enable(e,t)},t.prototype.disable=function(e,t){Array.isArray(e)||(e=[e]);var r=[];return e.forEach((function(e){var n=this.__find__(e);if(n<0){if(t)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!1,r.push(e)}),this),this.__cache__=null,r},t.prototype.getRules=function(e){return null===this.__cache__&&this.__compile__(),this.__cache__[e]||[]},e.exports=t},5005:(e,t,r)=>{"use strict";var n=r(6014).isSpace;e.exports=function(e,t,r,i){var o,a,s,u,l,d,c,f,h,p,_,m,g,b,v,y,w,k,C,E,x=e.lineMax,A=e.bMarks[t]+e.tShift[t],D=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(62!==e.src.charCodeAt(A++))return!1;if(i)return!0;for(u=h=e.sCount[t]+1,32===e.src.charCodeAt(A)?(A++,u++,h++,o=!1,y=!0):9===e.src.charCodeAt(A)?(y=!0,(e.bsCount[t]+h)%4==3?(A++,u++,h++,o=!1):o=!0):y=!1,p=[e.bMarks[t]],e.bMarks[t]=A;A<D&&(a=e.src.charCodeAt(A),n(a));)9===a?h+=4-(h+e.bsCount[t]+(o?1:0))%4:h++,A++;for(_=[e.bsCount[t]],e.bsCount[t]=e.sCount[t]+1+(y?1:0),d=A>=D,b=[e.sCount[t]],e.sCount[t]=h-u,v=[e.tShift[t]],e.tShift[t]=A-e.bMarks[t],k=e.md.block.ruler.getRules("blockquote"),g=e.parentType,e.parentType="blockquote",f=t+1;f<r&&(E=e.sCount[f]<e.blkIndent,!((A=e.bMarks[f]+e.tShift[f])>=(D=e.eMarks[f])));f++)if(62!==e.src.charCodeAt(A++)||E){if(d)break;for(w=!1,s=0,l=k.length;s<l;s++)if(k[s](e,f,r,!0)){w=!0;break}if(w){e.lineMax=f,0!==e.blkIndent&&(p.push(e.bMarks[f]),_.push(e.bsCount[f]),v.push(e.tShift[f]),b.push(e.sCount[f]),e.sCount[f]-=e.blkIndent);break}p.push(e.bMarks[f]),_.push(e.bsCount[f]),v.push(e.tShift[f]),b.push(e.sCount[f]),e.sCount[f]=-1}else{for(u=h=e.sCount[f]+1,32===e.src.charCodeAt(A)?(A++,u++,h++,o=!1,y=!0):9===e.src.charCodeAt(A)?(y=!0,(e.bsCount[f]+h)%4==3?(A++,u++,h++,o=!1):o=!0):y=!1,p.push(e.bMarks[f]),e.bMarks[f]=A;A<D&&(a=e.src.charCodeAt(A),n(a));)9===a?h+=4-(h+e.bsCount[f]+(o?1:0))%4:h++,A++;d=A>=D,_.push(e.bsCount[f]),e.bsCount[f]=e.sCount[f]+1+(y?1:0),b.push(e.sCount[f]),e.sCount[f]=h-u,v.push(e.tShift[f]),e.tShift[f]=A-e.bMarks[f]}for(m=e.blkIndent,e.blkIndent=0,(C=e.push("blockquote_open","blockquote",1)).markup=">",C.map=c=[t,0],e.md.block.tokenize(e,t,f),(C=e.push("blockquote_close","blockquote",-1)).markup=">",e.lineMax=x,e.parentType=g,c[1]=e.line,s=0;s<v.length;s++)e.bMarks[s+t]=p[s],e.tShift[s+t]=v[s],e.sCount[s+t]=b[s],e.bsCount[s+t]=_[s];return e.blkIndent=m,!0}},817:e=>{"use strict";e.exports=function(e,t,r){var n,i,o;if(e.sCount[t]-e.blkIndent<4)return!1;for(i=n=t+1;n<r;)if(e.isEmpty(n))n++;else{if(!(e.sCount[n]-e.blkIndent>=4))break;i=++n}return e.line=i,(o=e.push("code_block","code",0)).content=e.getLines(t,i,4+e.blkIndent,!0),o.map=[t,e.line],!0}},5111:e=>{"use strict";e.exports=function(e,t,r,n){var i,o,a,s,u,l,d,c=!1,f=e.bMarks[t]+e.tShift[t],h=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(f+3>h)return!1;if(126!==(i=e.src.charCodeAt(f))&&96!==i)return!1;if(u=f,(o=(f=e.skipChars(f,i))-u)<3)return!1;if(d=e.src.slice(u,f),a=e.src.slice(f,h),96===i&&a.indexOf(String.fromCharCode(i))>=0)return!1;if(n)return!0;for(s=t;!(++s>=r||(f=u=e.bMarks[s]+e.tShift[s])<(h=e.eMarks[s])&&e.sCount[s]<e.blkIndent);)if(e.src.charCodeAt(f)===i&&!(e.sCount[s]-e.blkIndent>=4||(f=e.skipChars(f,i))-u<o||(f=e.skipSpaces(f))<h)){c=!0;break}return o=e.sCount[t],e.line=s+(c?1:0),(l=e.push("fence","code",0)).info=a,l.content=e.getLines(t+1,s,o,!0),l.markup=d,l.map=[t,e.line],!0}},5115:(e,t,r)=>{"use strict";var n=r(6014).isSpace;e.exports=function(e,t,r,i){var o,a,s,u,l=e.bMarks[t]+e.tShift[t],d=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(35!==(o=e.src.charCodeAt(l))||l>=d)return!1;for(a=1,o=e.src.charCodeAt(++l);35===o&&l<d&&a<=6;)a++,o=e.src.charCodeAt(++l);return!(a>6||l<d&&!n(o)||(i||(d=e.skipSpacesBack(d,l),(s=e.skipCharsBack(d,35,l))>l&&n(e.src.charCodeAt(s-1))&&(d=s),e.line=t+1,(u=e.push("heading_open","h"+String(a),1)).markup="########".slice(0,a),u.map=[t,e.line],(u=e.push("inline","",0)).content=e.src.slice(l,d).trim(),u.map=[t,e.line],u.children=[],(u=e.push("heading_close","h"+String(a),-1)).markup="########".slice(0,a)),0))}},4470:(e,t,r)=>{"use strict";var n=r(6014).isSpace;e.exports=function(e,t,r,i){var o,a,s,u,l=e.bMarks[t]+e.tShift[t],d=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(42!==(o=e.src.charCodeAt(l++))&&45!==o&&95!==o)return!1;for(a=1;l<d;){if((s=e.src.charCodeAt(l++))!==o&&!n(s))return!1;s===o&&a++}return!(a<3||(i||(e.line=t+1,(u=e.push("hr","hr",0)).map=[t,e.line],u.markup=Array(a+1).join(String.fromCharCode(o))),0))}},9751:(e,t,r)=>{"use strict";var n=r(2552),i=r(758).q,o=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+n.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(i.source+"\\s*$"),/^$/,!1]];e.exports=function(e,t,r,n){var i,a,s,u,l=e.bMarks[t]+e.tShift[t],d=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(!e.md.options.html)return!1;if(60!==e.src.charCodeAt(l))return!1;for(u=e.src.slice(l,d),i=0;i<o.length&&!o[i][0].test(u);i++);if(i===o.length)return!1;if(n)return o[i][2];if(a=t+1,!o[i][1].test(u))for(;a<r&&!(e.sCount[a]<e.blkIndent);a++)if(l=e.bMarks[a]+e.tShift[a],d=e.eMarks[a],u=e.src.slice(l,d),o[i][1].test(u)){0!==u.length&&a++;break}return e.line=a,(s=e.push("html_block","",0)).map=[t,a],s.content=e.getLines(t,a,e.blkIndent,!0),!0}},7609:e=>{"use strict";e.exports=function(e,t,r){var n,i,o,a,s,u,l,d,c,f,h=t+1,p=e.md.block.ruler.getRules("paragraph");if(e.sCount[t]-e.blkIndent>=4)return!1;for(f=e.parentType,e.parentType="paragraph";h<r&&!e.isEmpty(h);h++)if(!(e.sCount[h]-e.blkIndent>3)){if(e.sCount[h]>=e.blkIndent&&(u=e.bMarks[h]+e.tShift[h])<(l=e.eMarks[h])&&(45===(c=e.src.charCodeAt(u))||61===c)&&(u=e.skipChars(u,c),(u=e.skipSpaces(u))>=l)){d=61===c?1:2;break}if(!(e.sCount[h]<0)){for(i=!1,o=0,a=p.length;o<a;o++)if(p[o](e,h,r,!0)){i=!0;break}if(i)break}}return!!d&&(n=e.getLines(t,h,e.blkIndent,!1).trim(),e.line=h+1,(s=e.push("heading_open","h"+String(d),1)).markup=String.fromCharCode(c),s.map=[t,e.line],(s=e.push("inline","",0)).content=n,s.map=[t,e.line-1],s.children=[],(s=e.push("heading_close","h"+String(d),-1)).markup=String.fromCharCode(c),e.parentType=f,!0)}},9802:(e,t,r)=>{"use strict";var n=r(6014).isSpace;function i(e,t){var r,i,o,a;return i=e.bMarks[t]+e.tShift[t],o=e.eMarks[t],42!==(r=e.src.charCodeAt(i++))&&45!==r&&43!==r||i<o&&(a=e.src.charCodeAt(i),!n(a))?-1:i}function o(e,t){var r,i=e.bMarks[t]+e.tShift[t],o=i,a=e.eMarks[t];if(o+1>=a)return-1;if((r=e.src.charCodeAt(o++))<48||r>57)return-1;for(;;){if(o>=a)return-1;if(!((r=e.src.charCodeAt(o++))>=48&&r<=57)){if(41===r||46===r)break;return-1}if(o-i>=10)return-1}return o<a&&(r=e.src.charCodeAt(o),!n(r))?-1:o}e.exports=function(e,t,r,n){var a,s,u,l,d,c,f,h,p,_,m,g,b,v,y,w,k,C,E,x,A,D,T,S,q,N,F,I,L=!1,O=!0;if(e.sCount[t]-e.blkIndent>=4)return!1;if(e.listIndent>=0&&e.sCount[t]-e.listIndent>=4&&e.sCount[t]<e.blkIndent)return!1;if(n&&"paragraph"===e.parentType&&e.tShift[t]>=e.blkIndent&&(L=!0),(T=o(e,t))>=0){if(f=!0,q=e.bMarks[t]+e.tShift[t],b=Number(e.src.substr(q,T-q-1)),L&&1!==b)return!1}else{if(!((T=i(e,t))>=0))return!1;f=!1}if(L&&e.skipSpaces(T)>=e.eMarks[t])return!1;if(g=e.src.charCodeAt(T-1),n)return!0;for(m=e.tokens.length,f?(I=e.push("ordered_list_open","ol",1),1!==b&&(I.attrs=[["start",b]])):I=e.push("bullet_list_open","ul",1),I.map=_=[t,0],I.markup=String.fromCharCode(g),y=t,S=!1,F=e.md.block.ruler.getRules("list"),C=e.parentType,e.parentType="list";y<r;){for(D=T,v=e.eMarks[y],c=w=e.sCount[y]+T-(e.bMarks[t]+e.tShift[t]);D<v;){if(9===(a=e.src.charCodeAt(D)))w+=4-(w+e.bsCount[y])%4;else{if(32!==a)break;w++}D++}if((d=(s=D)>=v?1:w-c)>4&&(d=1),l=c+d,(I=e.push("list_item_open","li",1)).markup=String.fromCharCode(g),I.map=h=[t,0],A=e.tight,x=e.tShift[t],E=e.sCount[t],k=e.listIndent,e.listIndent=e.blkIndent,e.blkIndent=l,e.tight=!0,e.tShift[t]=s-e.bMarks[t],e.sCount[t]=w,s>=v&&e.isEmpty(t+1)?e.line=Math.min(e.line+2,r):e.md.block.tokenize(e,t,r,!0),e.tight&&!S||(O=!1),S=e.line-t>1&&e.isEmpty(e.line-1),e.blkIndent=e.listIndent,e.listIndent=k,e.tShift[t]=x,e.sCount[t]=E,e.tight=A,(I=e.push("list_item_close","li",-1)).markup=String.fromCharCode(g),y=t=e.line,h[1]=y,s=e.bMarks[t],y>=r)break;if(e.sCount[y]<e.blkIndent)break;if(e.sCount[t]-e.blkIndent>=4)break;for(N=!1,u=0,p=F.length;u<p;u++)if(F[u](e,y,r,!0)){N=!0;break}if(N)break;if(f){if((T=o(e,y))<0)break}else if((T=i(e,y))<0)break;if(g!==e.src.charCodeAt(T-1))break}return(I=f?e.push("ordered_list_close","ol",-1):e.push("bullet_list_close","ul",-1)).markup=String.fromCharCode(g),_[1]=y,e.line=y,e.parentType=C,O&&function(e,t){var r,n,i=e.level+2;for(r=t+2,n=e.tokens.length-2;r<n;r++)e.tokens[r].level===i&&"paragraph_open"===e.tokens[r].type&&(e.tokens[r+2].hidden=!0,e.tokens[r].hidden=!0,r+=2)}(e,m),!0}},2583:e=>{"use strict";e.exports=function(e,t){var r,n,i,o,a,s,u=t+1,l=e.md.block.ruler.getRules("paragraph"),d=e.lineMax;for(s=e.parentType,e.parentType="paragraph";u<d&&!e.isEmpty(u);u++)if(!(e.sCount[u]-e.blkIndent>3||e.sCount[u]<0)){for(n=!1,i=0,o=l.length;i<o;i++)if(l[i](e,u,d,!0)){n=!0;break}if(n)break}return r=e.getLines(t,u,e.blkIndent,!1).trim(),e.line=u,(a=e.push("paragraph_open","p",1)).map=[t,e.line],(a=e.push("inline","",0)).content=r,a.map=[t,e.line],a.children=[],a=e.push("paragraph_close","p",-1),e.parentType=s,!0}},5008:(e,t,r)=>{"use strict";var n=r(6014).normalizeReference,i=r(6014).isSpace;e.exports=function(e,t,r,o){var a,s,u,l,d,c,f,h,p,_,m,g,b,v,y,w,k=0,C=e.bMarks[t]+e.tShift[t],E=e.eMarks[t],x=t+1;if(e.sCount[t]-e.blkIndent>=4)return!1;if(91!==e.src.charCodeAt(C))return!1;for(;++C<E;)if(93===e.src.charCodeAt(C)&&92!==e.src.charCodeAt(C-1)){if(C+1===E)return!1;if(58!==e.src.charCodeAt(C+1))return!1;break}for(l=e.lineMax,y=e.md.block.ruler.getRules("reference"),_=e.parentType,e.parentType="reference";x<l&&!e.isEmpty(x);x++)if(!(e.sCount[x]-e.blkIndent>3||e.sCount[x]<0)){for(v=!1,c=0,f=y.length;c<f;c++)if(y[c](e,x,l,!0)){v=!0;break}if(v)break}for(E=(b=e.getLines(t,x,e.blkIndent,!1).trim()).length,C=1;C<E;C++){if(91===(a=b.charCodeAt(C)))return!1;if(93===a){p=C;break}(10===a||92===a&&++C<E&&10===b.charCodeAt(C))&&k++}if(p<0||58!==b.charCodeAt(p+1))return!1;for(C=p+2;C<E;C++)if(10===(a=b.charCodeAt(C)))k++;else if(!i(a))break;if(!(m=e.md.helpers.parseLinkDestination(b,C,E)).ok)return!1;if(d=e.md.normalizeLink(m.str),!e.md.validateLink(d))return!1;for(s=C=m.pos,u=k+=m.lines,g=C;C<E;C++)if(10===(a=b.charCodeAt(C)))k++;else if(!i(a))break;for(m=e.md.helpers.parseLinkTitle(b,C,E),C<E&&g!==C&&m.ok?(w=m.str,C=m.pos,k+=m.lines):(w="",C=s,k=u);C<E&&(a=b.charCodeAt(C),i(a));)C++;if(C<E&&10!==b.charCodeAt(C)&&w)for(w="",C=s,k=u;C<E&&(a=b.charCodeAt(C),i(a));)C++;return!(C<E&&10!==b.charCodeAt(C)||!(h=n(b.slice(1,p)))||(o||(void 0===e.env.references&&(e.env.references={}),void 0===e.env.references[h]&&(e.env.references[h]={title:w,href:d}),e.parentType=_,e.line=t+k+1),0))}},6357:(e,t,r)=>{"use strict";var n=r(6049),i=r(6014).isSpace;function o(e,t,r,n){var o,a,s,u,l,d,c,f;for(this.src=e,this.md=t,this.env=r,this.tokens=n,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",f=!1,s=u=d=c=0,l=(a=this.src).length;u<l;u++){if(o=a.charCodeAt(u),!f){if(i(o)){d++,9===o?c+=4-c%4:c++;continue}f=!0}10!==o&&u!==l-1||(10!==o&&u++,this.bMarks.push(s),this.eMarks.push(u),this.tShift.push(d),this.sCount.push(c),this.bsCount.push(0),f=!1,d=0,c=0,s=u+1)}this.bMarks.push(a.length),this.eMarks.push(a.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1}o.prototype.push=function(e,t,r){var i=new n(e,t,r);return i.block=!0,r<0&&this.level--,i.level=this.level,r>0&&this.level++,this.tokens.push(i),i},o.prototype.isEmpty=function(e){return this.bMarks[e]+this.tShift[e]>=this.eMarks[e]},o.prototype.skipEmptyLines=function(e){for(var t=this.lineMax;e<t&&!(this.bMarks[e]+this.tShift[e]<this.eMarks[e]);e++);return e},o.prototype.skipSpaces=function(e){for(var t,r=this.src.length;e<r&&(t=this.src.charCodeAt(e),i(t));e++);return e},o.prototype.skipSpacesBack=function(e,t){if(e<=t)return e;for(;e>t;)if(!i(this.src.charCodeAt(--e)))return e+1;return e},o.prototype.skipChars=function(e,t){for(var r=this.src.length;e<r&&this.src.charCodeAt(e)===t;e++);return e},o.prototype.skipCharsBack=function(e,t,r){if(e<=r)return e;for(;e>r;)if(t!==this.src.charCodeAt(--e))return e+1;return e},o.prototype.getLines=function(e,t,r,n){var o,a,s,u,l,d,c,f=e;if(e>=t)return"";for(d=new Array(t-e),o=0;f<t;f++,o++){for(a=0,c=u=this.bMarks[f],l=f+1<t||n?this.eMarks[f]+1:this.eMarks[f];u<l&&a<r;){if(s=this.src.charCodeAt(u),i(s))9===s?a+=4-(a+this.bsCount[f])%4:a++;else{if(!(u-c<this.tShift[f]))break;a++}u++}d[o]=a>r?new Array(a-r+1).join(" ")+this.src.slice(u,l):this.src.slice(u,l)}return d.join("")},o.prototype.Token=n,e.exports=o},4259:(e,t,r)=>{"use strict";var n=r(6014).isSpace;function i(e,t){var r=e.bMarks[t]+e.tShift[t],n=e.eMarks[t];return e.src.substr(r,n-r)}function o(e){var t,r=[],n=0,i=e.length,o=!1,a=0,s="";for(t=e.charCodeAt(n);n<i;)124===t&&(o?(s+=e.substring(a,n-1),a=n):(r.push(s+e.substring(a,n)),s="",a=n+1)),o=92===t,n++,t=e.charCodeAt(n);return r.push(s+e.substring(a)),r}e.exports=function(e,t,r,a){var s,u,l,d,c,f,h,p,_,m,g,b,v,y,w,k;if(t+2>r)return!1;if(f=t+1,e.sCount[f]<e.blkIndent)return!1;if(e.sCount[f]-e.blkIndent>=4)return!1;if((l=e.bMarks[f]+e.tShift[f])>=e.eMarks[f])return!1;if(124!==(s=e.src.charCodeAt(l++))&&45!==s&&58!==s)return!1;for(;l<e.eMarks[f];){if(124!==(s=e.src.charCodeAt(l))&&45!==s&&58!==s&&!n(s))return!1;l++}for(h=(u=i(e,t+1)).split("|"),m=[],d=0;d<h.length;d++){if(!(g=h[d].trim())){if(0===d||d===h.length-1)continue;return!1}if(!/^:?-+:?$/.test(g))return!1;58===g.charCodeAt(g.length-1)?m.push(58===g.charCodeAt(0)?"center":"right"):58===g.charCodeAt(0)?m.push("left"):m.push("")}if(-1===(u=i(e,t).trim()).indexOf("|"))return!1;if(e.sCount[t]-e.blkIndent>=4)return!1;if((h=o(u)).length&&""===h[0]&&h.shift(),h.length&&""===h[h.length-1]&&h.pop(),0===(p=h.length)||p!==m.length)return!1;if(a)return!0;for(y=e.parentType,e.parentType="table",k=e.md.block.ruler.getRules("blockquote"),(_=e.push("table_open","table",1)).map=b=[t,0],(_=e.push("thead_open","thead",1)).map=[t,t+1],(_=e.push("tr_open","tr",1)).map=[t,t+1],d=0;d<h.length;d++)_=e.push("th_open","th",1),m[d]&&(_.attrs=[["style","text-align:"+m[d]]]),(_=e.push("inline","",0)).content=h[d].trim(),_.children=[],_=e.push("th_close","th",-1);for(_=e.push("tr_close","tr",-1),_=e.push("thead_close","thead",-1),f=t+2;f<r&&!(e.sCount[f]<e.blkIndent);f++){for(w=!1,d=0,c=k.length;d<c;d++)if(k[d](e,f,r,!0)){w=!0;break}if(w)break;if(!(u=i(e,f).trim()))break;if(e.sCount[f]-e.blkIndent>=4)break;for((h=o(u)).length&&""===h[0]&&h.shift(),h.length&&""===h[h.length-1]&&h.pop(),f===t+2&&((_=e.push("tbody_open","tbody",1)).map=v=[t+2,0]),(_=e.push("tr_open","tr",1)).map=[f,f+1],d=0;d<p;d++)_=e.push("td_open","td",1),m[d]&&(_.attrs=[["style","text-align:"+m[d]]]),(_=e.push("inline","",0)).content=h[d]?h[d].trim():"",_.children=[],_=e.push("td_close","td",-1);_=e.push("tr_close","tr",-1)}return v&&(_=e.push("tbody_close","tbody",-1),v[1]=f),_=e.push("table_close","table",-1),b[1]=f,e.parentType=y,e.line=f,!0}},8765:e=>{"use strict";e.exports=function(e){var t;e.inlineMode?((t=new e.Token("inline","",0)).content=e.src,t.map=[0,1],t.children=[],e.tokens.push(t)):e.md.block.parse(e.src,e.md,e.env,e.tokens)}},5003:e=>{"use strict";e.exports=function(e){var t,r,n,i=e.tokens;for(r=0,n=i.length;r<n;r++)"inline"===(t=i[r]).type&&e.md.inline.parse(t.content,e.md,e.env,t.children)}},1636:(e,t,r)=>{"use strict";var n=r(6014).arrayReplaceAt;function i(e){return/^<\/a\s*>/i.test(e)}e.exports=function(e){var t,r,o,a,s,u,l,d,c,f,h,p,_,m,g,b,v,y,w=e.tokens;if(e.md.options.linkify)for(r=0,o=w.length;r<o;r++)if("inline"===w[r].type&&e.md.linkify.pretest(w[r].content))for(_=0,t=(a=w[r].children).length-1;t>=0;t--)if("link_close"!==(u=a[t]).type){if("html_inline"===u.type&&(y=u.content,/^<a[>\s]/i.test(y)&&_>0&&_--,i(u.content)&&_++),!(_>0)&&"text"===u.type&&e.md.linkify.test(u.content)){for(c=u.content,v=e.md.linkify.match(c),l=[],p=u.level,h=0,d=0;d<v.length;d++)m=v[d].url,g=e.md.normalizeLink(m),e.md.validateLink(g)&&(b=v[d].text,b=v[d].schema?"mailto:"!==v[d].schema||/^mailto:/i.test(b)?e.md.normalizeLinkText(b):e.md.normalizeLinkText("mailto:"+b).replace(/^mailto:/,""):e.md.normalizeLinkText("http://"+b).replace(/^http:\/\//,""),(f=v[d].index)>h&&((s=new e.Token("text","",0)).content=c.slice(h,f),s.level=p,l.push(s)),(s=new e.Token("link_open","a",1)).attrs=[["href",g]],s.level=p++,s.markup="linkify",s.info="auto",l.push(s),(s=new e.Token("text","",0)).content=b,s.level=p,l.push(s),(s=new e.Token("link_close","a",-1)).level=--p,s.markup="linkify",s.info="auto",l.push(s),h=v[d].lastIndex);h<c.length&&((s=new e.Token("text","",0)).content=c.slice(h),s.level=p,l.push(s)),w[r].children=a=n(a,t,l)}}else for(t--;a[t].level!==u.level&&"link_open"!==a[t].type;)t--}},1099:e=>{"use strict";var t=/\r\n?|\n/g,r=/\0/g;e.exports=function(e){var n;n=(n=e.src.replace(t,"\n")).replace(r,"�"),e.src=n}},1403:e=>{"use strict";var t=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,r=/\((c|tm|r|p)\)/i,n=/\((c|tm|r|p)\)/gi,i={c:"©",r:"®",p:"§",tm:"™"};function o(e,t){return i[t.toLowerCase()]}function a(e){var t,r,i=0;for(t=e.length-1;t>=0;t--)"text"!==(r=e[t]).type||i||(r.content=r.content.replace(n,o)),"link_open"===r.type&&"auto"===r.info&&i--,"link_close"===r.type&&"auto"===r.info&&i++}function s(e){var r,n,i=0;for(r=e.length-1;r>=0;r--)"text"!==(n=e[r]).type||i||t.test(n.content)&&(n.content=n.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---(?=[^-]|$)/gm,"$1—").replace(/(^|\s)--(?=\s|$)/gm,"$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/gm,"$1–")),"link_open"===n.type&&"auto"===n.info&&i--,"link_close"===n.type&&"auto"===n.info&&i++}e.exports=function(e){var n;if(e.md.options.typographer)for(n=e.tokens.length-1;n>=0;n--)"inline"===e.tokens[n].type&&(r.test(e.tokens[n].content)&&a(e.tokens[n].children),t.test(e.tokens[n].content)&&s(e.tokens[n].children))}},8910:(e,t,r)=>{"use strict";var n=r(6014).isWhiteSpace,i=r(6014).isPunctChar,o=r(6014).isMdAsciiPunct,a=/['"]/,s=/['"]/g;function u(e,t,r){return e.substr(0,t)+r+e.substr(t+1)}function l(e,t){var r,a,l,d,c,f,h,p,_,m,g,b,v,y,w,k,C,E,x,A,D;for(x=[],r=0;r<e.length;r++){for(a=e[r],h=e[r].level,C=x.length-1;C>=0&&!(x[C].level<=h);C--);if(x.length=C+1,"text"===a.type){c=0,f=(l=a.content).length;e:for(;c<f&&(s.lastIndex=c,d=s.exec(l));){if(w=k=!0,c=d.index+1,E="'"===d[0],_=32,d.index-1>=0)_=l.charCodeAt(d.index-1);else for(C=r-1;C>=0&&"softbreak"!==e[C].type&&"hardbreak"!==e[C].type;C--)if(e[C].content){_=e[C].content.charCodeAt(e[C].content.length-1);break}if(m=32,c<f)m=l.charCodeAt(c);else for(C=r+1;C<e.length&&"softbreak"!==e[C].type&&"hardbreak"!==e[C].type;C++)if(e[C].content){m=e[C].content.charCodeAt(0);break}if(g=o(_)||i(String.fromCharCode(_)),b=o(m)||i(String.fromCharCode(m)),v=n(_),(y=n(m))?w=!1:b&&(v||g||(w=!1)),v?k=!1:g&&(y||b||(k=!1)),34===m&&'"'===d[0]&&_>=48&&_<=57&&(k=w=!1),w&&k&&(w=g,k=b),w||k){if(k)for(C=x.length-1;C>=0&&(p=x[C],!(x[C].level<h));C--)if(p.single===E&&x[C].level===h){p=x[C],E?(A=t.md.options.quotes[2],D=t.md.options.quotes[3]):(A=t.md.options.quotes[0],D=t.md.options.quotes[1]),a.content=u(a.content,d.index,D),e[p.token].content=u(e[p.token].content,p.pos,A),c+=D.length-1,p.token===r&&(c+=A.length-1),f=(l=a.content).length,x.length=C;continue e}w?x.push({token:r,pos:d.index,single:E,level:h}):k&&E&&(a.content=u(a.content,d.index,"’"))}else E&&(a.content=u(a.content,d.index,"’"))}}}}e.exports=function(e){var t;if(e.md.options.typographer)for(t=e.tokens.length-1;t>=0;t--)"inline"===e.tokens[t].type&&a.test(e.tokens[t].content)&&l(e.tokens[t].children,e)}},8799:(e,t,r)=>{"use strict";var n=r(6049);function i(e,t,r){this.src=e,this.env=r,this.tokens=[],this.inlineMode=!1,this.md=t}i.prototype.Token=n,e.exports=i},1996:e=>{"use strict";var t=/^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/,r=/^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;e.exports=function(e,n){var i,o,a,s,u,l,d=e.pos;if(60!==e.src.charCodeAt(d))return!1;for(u=e.pos,l=e.posMax;;){if(++d>=l)return!1;if(60===(s=e.src.charCodeAt(d)))return!1;if(62===s)break}return i=e.src.slice(u+1,d),r.test(i)?(o=e.md.normalizeLink(i),!!e.md.validateLink(o)&&(n||((a=e.push("link_open","a",1)).attrs=[["href",o]],a.markup="autolink",a.info="auto",(a=e.push("text","",0)).content=e.md.normalizeLinkText(i),(a=e.push("link_close","a",-1)).markup="autolink",a.info="auto"),e.pos+=i.length+2,!0)):!!t.test(i)&&(o=e.md.normalizeLink("mailto:"+i),!!e.md.validateLink(o)&&(n||((a=e.push("link_open","a",1)).attrs=[["href",o]],a.markup="autolink",a.info="auto",(a=e.push("text","",0)).content=e.md.normalizeLinkText(i),(a=e.push("link_close","a",-1)).markup="autolink",a.info="auto"),e.pos+=i.length+2,!0))}},9149:e=>{"use strict";e.exports=function(e,t){var r,n,i,o,a,s,u,l,d=e.pos;if(96!==e.src.charCodeAt(d))return!1;for(r=d,d++,n=e.posMax;d<n&&96===e.src.charCodeAt(d);)d++;if(u=(i=e.src.slice(r,d)).length,e.backticksScanned&&(e.backticks[u]||0)<=r)return t||(e.pending+=i),e.pos+=u,!0;for(a=s=d;-1!==(a=e.src.indexOf("`",s));){for(s=a+1;s<n&&96===e.src.charCodeAt(s);)s++;if((l=s-a)===u)return t||((o=e.push("code_inline","code",0)).markup=i,o.content=e.src.slice(d,a).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),e.pos=s,!0;e.backticks[l]=a}return e.backticksScanned=!0,t||(e.pending+=i),e.pos+=u,!0}},7982:e=>{"use strict";function t(e,t){var r,n,i,o,a,s,u,l,d={},c=t.length;for(r=0;r<c;r++)if((i=t[r]).length=i.length||0,i.close){for(d.hasOwnProperty(i.marker)||(d[i.marker]=[-1,-1,-1]),a=d[i.marker][i.length%3],(n=r-i.jump-1)<-1&&(n=-1),s=n;n>a;n-=o.jump+1)if((o=t[n]).marker===i.marker&&o.open&&o.end<0&&(u=!1,(o.close||i.open)&&(o.length+i.length)%3==0&&(o.length%3==0&&i.length%3==0||(u=!0)),!u)){l=n>0&&!t[n-1].open?t[n-1].jump+1:0,i.jump=r-n+l,i.open=!1,o.end=r,o.jump=l,o.close=!1,s=-1;break}-1!==s&&(d[i.marker][(i.length||0)%3]=s)}}e.exports=function(e){var r,n=e.tokens_meta,i=e.tokens_meta.length;for(t(0,e.delimiters),r=0;r<i;r++)n[r]&&n[r].delimiters&&t(0,n[r].delimiters)}},7857:e=>{"use strict";function t(e,t){var r,n,i,o,a,s;for(r=t.length-1;r>=0;r--)95!==(n=t[r]).marker&&42!==n.marker||-1!==n.end&&(i=t[n.end],s=r>0&&t[r-1].end===n.end+1&&t[r-1].token===n.token-1&&t[n.end+1].token===i.token+1&&t[r-1].marker===n.marker,a=String.fromCharCode(n.marker),(o=e.tokens[n.token]).type=s?"strong_open":"em_open",o.tag=s?"strong":"em",o.nesting=1,o.markup=s?a+a:a,o.content="",(o=e.tokens[i.token]).type=s?"strong_close":"em_close",o.tag=s?"strong":"em",o.nesting=-1,o.markup=s?a+a:a,o.content="",s&&(e.tokens[t[r-1].token].content="",e.tokens[t[n.end+1].token].content="",r--))}e.exports.w=function(e,t){var r,n,i=e.pos,o=e.src.charCodeAt(i);if(t)return!1;if(95!==o&&42!==o)return!1;for(n=e.scanDelims(e.pos,42===o),r=0;r<n.length;r++)e.push("text","",0).content=String.fromCharCode(o),e.delimiters.push({marker:o,length:n.length,jump:r,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},e.exports.g=function(e){var r,n=e.tokens_meta,i=e.tokens_meta.length;for(t(e,e.delimiters),r=0;r<i;r++)n[r]&&n[r].delimiters&&t(e,n[r].delimiters)}},7662:(e,t,r)=>{"use strict";var n=r(9017),i=r(6014).has,o=r(6014).isValidEntityCode,a=r(6014).fromCodePoint,s=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,u=/^&([a-z][a-z0-9]{1,31});/i;e.exports=function(e,t){var r,l,d=e.pos,c=e.posMax;if(38!==e.src.charCodeAt(d))return!1;if(d+1<c)if(35===e.src.charCodeAt(d+1)){if(l=e.src.slice(d).match(s))return t||(r="x"===l[1][0].toLowerCase()?parseInt(l[1].slice(1),16):parseInt(l[1],10),e.pending+=o(r)?a(r):a(65533)),e.pos+=l[0].length,!0}else if((l=e.src.slice(d).match(u))&&i(n,l[1]))return t||(e.pending+=n[l[1]]),e.pos+=l[0].length,!0;return t||(e.pending+="&"),e.pos++,!0}},4903:(e,t,r)=>{"use strict";for(var n=r(6014).isSpace,i=[],o=0;o<256;o++)i.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach((function(e){i[e.charCodeAt(0)]=1})),e.exports=function(e,t){var r,o=e.pos,a=e.posMax;if(92!==e.src.charCodeAt(o))return!1;if(++o<a){if((r=e.src.charCodeAt(o))<256&&0!==i[r])return t||(e.pending+=e.src[o]),e.pos+=2,!0;if(10===r){for(t||e.push("hardbreak","br",0),o++;o<a&&(r=e.src.charCodeAt(o),n(r));)o++;return e.pos=o,!0}}return t||(e.pending+="\\"),e.pos++,!0}},7320:(e,t,r)=>{"use strict";var n=r(758).n;e.exports=function(e,t){var r,i,o,a=e.pos;return!(!e.md.options.html||(o=e.posMax,60!==e.src.charCodeAt(a)||a+2>=o||33!==(r=e.src.charCodeAt(a+1))&&63!==r&&47!==r&&!function(e){var t=32|e;return t>=97&&t<=122}(r)||!(i=e.src.slice(a).match(n))||(t||(e.push("html_inline","",0).content=e.src.slice(a,a+i[0].length)),e.pos+=i[0].length,0)))}},6846:(e,t,r)=>{"use strict";var n=r(6014).normalizeReference,i=r(6014).isSpace;e.exports=function(e,t){var r,o,a,s,u,l,d,c,f,h,p,_,m,g="",b=e.pos,v=e.posMax;if(33!==e.src.charCodeAt(e.pos))return!1;if(91!==e.src.charCodeAt(e.pos+1))return!1;if(l=e.pos+2,(u=e.md.helpers.parseLinkLabel(e,e.pos+1,!1))<0)return!1;if((d=u+1)<v&&40===e.src.charCodeAt(d)){for(d++;d<v&&(o=e.src.charCodeAt(d),i(o)||10===o);d++);if(d>=v)return!1;for(m=d,(f=e.md.helpers.parseLinkDestination(e.src,d,e.posMax)).ok&&(g=e.md.normalizeLink(f.str),e.md.validateLink(g)?d=f.pos:g=""),m=d;d<v&&(o=e.src.charCodeAt(d),i(o)||10===o);d++);if(f=e.md.helpers.parseLinkTitle(e.src,d,e.posMax),d<v&&m!==d&&f.ok)for(h=f.str,d=f.pos;d<v&&(o=e.src.charCodeAt(d),i(o)||10===o);d++);else h="";if(d>=v||41!==e.src.charCodeAt(d))return e.pos=b,!1;d++}else{if(void 0===e.env.references)return!1;if(d<v&&91===e.src.charCodeAt(d)?(m=d+1,(d=e.md.helpers.parseLinkLabel(e,d))>=0?s=e.src.slice(m,d++):d=u+1):d=u+1,s||(s=e.src.slice(l,u)),!(c=e.env.references[n(s)]))return e.pos=b,!1;g=c.href,h=c.title}return t||(a=e.src.slice(l,u),e.md.inline.parse(a,e.md,e.env,_=[]),(p=e.push("image","img",0)).attrs=r=[["src",g],["alt",""]],p.children=_,p.content=a,h&&r.push(["title",h])),e.pos=d,e.posMax=v,!0}},1216:(e,t,r)=>{"use strict";var n=r(6014).normalizeReference,i=r(6014).isSpace;e.exports=function(e,t){var r,o,a,s,u,l,d,c,f="",h="",p=e.pos,_=e.posMax,m=e.pos,g=!0;if(91!==e.src.charCodeAt(e.pos))return!1;if(u=e.pos+1,(s=e.md.helpers.parseLinkLabel(e,e.pos,!0))<0)return!1;if((l=s+1)<_&&40===e.src.charCodeAt(l)){for(g=!1,l++;l<_&&(o=e.src.charCodeAt(l),i(o)||10===o);l++);if(l>=_)return!1;if(m=l,(d=e.md.helpers.parseLinkDestination(e.src,l,e.posMax)).ok){for(f=e.md.normalizeLink(d.str),e.md.validateLink(f)?l=d.pos:f="",m=l;l<_&&(o=e.src.charCodeAt(l),i(o)||10===o);l++);if(d=e.md.helpers.parseLinkTitle(e.src,l,e.posMax),l<_&&m!==l&&d.ok)for(h=d.str,l=d.pos;l<_&&(o=e.src.charCodeAt(l),i(o)||10===o);l++);}(l>=_||41!==e.src.charCodeAt(l))&&(g=!0),l++}if(g){if(void 0===e.env.references)return!1;if(l<_&&91===e.src.charCodeAt(l)?(m=l+1,(l=e.md.helpers.parseLinkLabel(e,l))>=0?a=e.src.slice(m,l++):l=s+1):l=s+1,a||(a=e.src.slice(u,s)),!(c=e.env.references[n(a)]))return e.pos=p,!1;f=c.href,h=c.title}return t||(e.pos=u,e.posMax=s,e.push("link_open","a",1).attrs=r=[["href",f]],h&&r.push(["title",h]),e.md.inline.tokenize(e),e.push("link_close","a",-1)),e.pos=l,e.posMax=_,!0}},8166:(e,t,r)=>{"use strict";var n=r(6014).isSpace;e.exports=function(e,t){var r,i,o=e.pos;if(10!==e.src.charCodeAt(o))return!1;for(r=e.pending.length-1,i=e.posMax,t||(r>=0&&32===e.pending.charCodeAt(r)?r>=1&&32===e.pending.charCodeAt(r-1)?(e.pending=e.pending.replace(/ +$/,""),e.push("hardbreak","br",0)):(e.pending=e.pending.slice(0,-1),e.push("softbreak","br",0)):e.push("softbreak","br",0)),o++;o<i&&n(e.src.charCodeAt(o));)o++;return e.pos=o,!0}},8650:(e,t,r)=>{"use strict";var n=r(6049),i=r(6014).isWhiteSpace,o=r(6014).isPunctChar,a=r(6014).isMdAsciiPunct;function s(e,t,r,n){this.src=e,this.env=r,this.md=t,this.tokens=n,this.tokens_meta=Array(n.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[],this.backticks={},this.backticksScanned=!1}s.prototype.pushPending=function(){var e=new n("text","",0);return e.content=this.pending,e.level=this.pendingLevel,this.tokens.push(e),this.pending="",e},s.prototype.push=function(e,t,r){this.pending&&this.pushPending();var i=new n(e,t,r),o=null;return r<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),i.level=this.level,r>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],o={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(i),this.tokens_meta.push(o),i},s.prototype.scanDelims=function(e,t){var r,n,s,u,l,d,c,f,h,p=e,_=!0,m=!0,g=this.posMax,b=this.src.charCodeAt(e);for(r=e>0?this.src.charCodeAt(e-1):32;p<g&&this.src.charCodeAt(p)===b;)p++;return s=p-e,n=p<g?this.src.charCodeAt(p):32,c=a(r)||o(String.fromCharCode(r)),h=a(n)||o(String.fromCharCode(n)),d=i(r),(f=i(n))?_=!1:h&&(d||c||(_=!1)),d?m=!1:c&&(f||h||(m=!1)),t?(u=_,l=m):(u=_&&(!m||c),l=m&&(!_||h)),{can_open:u,can_close:l,length:s}},s.prototype.Token=n,e.exports=s},4968:e=>{"use strict";function t(e,t){var r,n,i,o,a,s=[],u=t.length;for(r=0;r<u;r++)126===(i=t[r]).marker&&-1!==i.end&&(o=t[i.end],(a=e.tokens[i.token]).type="s_open",a.tag="s",a.nesting=1,a.markup="~~",a.content="",(a=e.tokens[o.token]).type="s_close",a.tag="s",a.nesting=-1,a.markup="~~",a.content="","text"===e.tokens[o.token-1].type&&"~"===e.tokens[o.token-1].content&&s.push(o.token-1));for(;s.length;){for(n=(r=s.pop())+1;n<e.tokens.length&&"s_close"===e.tokens[n].type;)n++;r!==--n&&(a=e.tokens[n],e.tokens[n]=e.tokens[r],e.tokens[r]=a)}}e.exports.w=function(e,t){var r,n,i,o,a=e.pos,s=e.src.charCodeAt(a);if(t)return!1;if(126!==s)return!1;if(i=(n=e.scanDelims(e.pos,!0)).length,o=String.fromCharCode(s),i<2)return!1;for(i%2&&(e.push("text","",0).content=o,i--),r=0;r<i;r+=2)e.push("text","",0).content=o+o,e.delimiters.push({marker:s,length:0,jump:r/2,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},e.exports.g=function(e){var r,n=e.tokens_meta,i=e.tokens_meta.length;for(t(e,e.delimiters),r=0;r<i;r++)n[r]&&n[r].delimiters&&t(e,n[r].delimiters)}},3572:e=>{"use strict";function t(e){switch(e){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return!0;default:return!1}}e.exports=function(e,r){for(var n=e.pos;n<e.posMax&&!t(e.src.charCodeAt(n));)n++;return n!==e.pos&&(r||(e.pending+=e.src.slice(e.pos,n)),e.pos=n,!0)}},2305:e=>{"use strict";e.exports=function(e){var t,r,n=0,i=e.tokens,o=e.tokens.length;for(t=r=0;t<o;t++)i[t].nesting<0&&n--,i[t].level=n,i[t].nesting>0&&n++,"text"===i[t].type&&t+1<o&&"text"===i[t+1].type?i[t+1].content=i[t].content+i[t+1].content:(t!==r&&(i[r]=i[t]),r++);t!==r&&(i.length=r)}},6049:e=>{"use strict";function t(e,t,r){this.type=e,this.tag=t,this.attrs=null,this.map=null,this.nesting=r,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1}t.prototype.attrIndex=function(e){var t,r,n;if(!this.attrs)return-1;for(r=0,n=(t=this.attrs).length;r<n;r++)if(t[r][0]===e)return r;return-1},t.prototype.attrPush=function(e){this.attrs?this.attrs.push(e):this.attrs=[e]},t.prototype.attrSet=function(e,t){var r=this.attrIndex(e),n=[e,t];r<0?this.attrPush(n):this.attrs[r]=n},t.prototype.attrGet=function(e){var t=this.attrIndex(e),r=null;return t>=0&&(r=this.attrs[t][1]),r},t.prototype.attrJoin=function(e,t){var r=this.attrIndex(e);r<0?this.attrPush([e,t]):this.attrs[r][1]=this.attrs[r][1]+" "+t},e.exports=t},2298:e=>{"use strict";var t={};function r(e,n){var i;return"string"!=typeof n&&(n=r.defaultChars),i=function(e){var r,n,i=t[e];if(i)return i;for(i=t[e]=[],r=0;r<128;r++)n=String.fromCharCode(r),i.push(n);for(r=0;r<e.length;r++)i[n=e.charCodeAt(r)]="%"+("0"+n.toString(16).toUpperCase()).slice(-2);return i}(n),e.replace(/(%[a-f0-9]{2})+/gi,(function(e){var t,r,n,o,a,s,u,l="";for(t=0,r=e.length;t<r;t+=3)(n=parseInt(e.slice(t+1,t+3),16))<128?l+=i[n]:192==(224&n)&&t+3<r&&128==(192&(o=parseInt(e.slice(t+4,t+6),16)))?(l+=(u=n<<6&1984|63&o)<128?"��":String.fromCharCode(u),t+=3):224==(240&n)&&t+6<r&&(o=parseInt(e.slice(t+4,t+6),16),a=parseInt(e.slice(t+7,t+9),16),128==(192&o)&&128==(192&a))?(l+=(u=n<<12&61440|o<<6&4032|63&a)<2048||u>=55296&&u<=57343?"���":String.fromCharCode(u),t+=6):240==(248&n)&&t+9<r&&(o=parseInt(e.slice(t+4,t+6),16),a=parseInt(e.slice(t+7,t+9),16),s=parseInt(e.slice(t+10,t+12),16),128==(192&o)&&128==(192&a)&&128==(192&s))?((u=n<<18&1835008|o<<12&258048|a<<6&4032|63&s)<65536||u>1114111?l+="����":(u-=65536,l+=String.fromCharCode(55296+(u>>10),56320+(1023&u))),t+=9):l+="�";return l}))}r.defaultChars=";/?:@&=+$,#",r.componentChars="",e.exports=r},2628:e=>{"use strict";var t={};function r(e,n,i){var o,a,s,u,l,d="";for("string"!=typeof n&&(i=n,n=r.defaultChars),void 0===i&&(i=!0),l=function(e){var r,n,i=t[e];if(i)return i;for(i=t[e]=[],r=0;r<128;r++)n=String.fromCharCode(r),/^[0-9a-z]$/i.test(n)?i.push(n):i.push("%"+("0"+r.toString(16).toUpperCase()).slice(-2));for(r=0;r<e.length;r++)i[e.charCodeAt(r)]=e[r];return i}(n),o=0,a=e.length;o<a;o++)if(s=e.charCodeAt(o),i&&37===s&&o+2<a&&/^[0-9a-f]{2}$/i.test(e.slice(o+1,o+3)))d+=e.slice(o,o+3),o+=2;else if(s<128)d+=l[s];else if(s>=55296&&s<=57343){if(s>=55296&&s<=56319&&o+1<a&&(u=e.charCodeAt(o+1))>=56320&&u<=57343){d+=encodeURIComponent(e[o]+e[o+1]),o++;continue}d+="%EF%BF%BD"}else d+=encodeURIComponent(e[o]);return d}r.defaultChars=";/?:@&=+$,-_.!~*'()#",r.componentChars="-_.!~*'()",e.exports=r},7907:e=>{"use strict";e.exports=function(e){var t="";return t+=e.protocol||"",t+=e.slashes?"//":"",t+=e.auth?e.auth+"@":"",e.hostname&&-1!==e.hostname.indexOf(":")?t+="["+e.hostname+"]":t+=e.hostname||"",t+=e.port?":"+e.port:"",t+=e.pathname||"",(t+=e.search||"")+(e.hash||"")}},802:(e,t,r)=>{"use strict";e.exports.encode=r(2628),e.exports.decode=r(2298),e.exports.format=r(7907),e.exports.parse=r(4332)},4332:e=>{"use strict";function t(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null}var r=/^([a-z0-9.+-]+:)/i,n=/:[0-9]*$/,i=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,o=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),a=["'"].concat(o),s=["%","/","?",";","#"].concat(a),u=["/","?","#"],l=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,c={javascript:!0,"javascript:":!0},f={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};t.prototype.parse=function(e,t){var n,o,a,h,p,_=e;if(_=_.trim(),!t&&1===e.split("#").length){var m=i.exec(_);if(m)return this.pathname=m[1],m[2]&&(this.search=m[2]),this}var g=r.exec(_);if(g&&(a=(g=g[0]).toLowerCase(),this.protocol=g,_=_.substr(g.length)),(t||g||_.match(/^\/\/[^@\/]+@[^@\/]+/))&&(!(p="//"===_.substr(0,2))||g&&c[g]||(_=_.substr(2),this.slashes=!0)),!c[g]&&(p||g&&!f[g])){var b,v,y=-1;for(n=0;n<u.length;n++)-1!==(h=_.indexOf(u[n]))&&(-1===y||h<y)&&(y=h);for(-1!==(v=-1===y?_.lastIndexOf("@"):_.lastIndexOf("@",y))&&(b=_.slice(0,v),_=_.slice(v+1),this.auth=b),y=-1,n=0;n<s.length;n++)-1!==(h=_.indexOf(s[n]))&&(-1===y||h<y)&&(y=h);-1===y&&(y=_.length),":"===_[y-1]&&y--;var w=_.slice(0,y);_=_.slice(y),this.parseHost(w),this.hostname=this.hostname||"";var k="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!k){var C=this.hostname.split(/\./);for(n=0,o=C.length;n<o;n++){var E=C[n];if(E&&!E.match(l)){for(var x="",A=0,D=E.length;A<D;A++)E.charCodeAt(A)>127?x+="x":x+=E[A];if(!x.match(l)){var T=C.slice(0,n),S=C.slice(n+1),q=E.match(d);q&&(T.push(q[1]),S.unshift(q[2])),S.length&&(_=S.join(".")+_),this.hostname=T.join(".");break}}}}this.hostname.length>255&&(this.hostname=""),k&&(this.hostname=this.hostname.substr(1,this.hostname.length-2))}var N=_.indexOf("#");-1!==N&&(this.hash=_.substr(N),_=_.slice(0,N));var F=_.indexOf("?");return-1!==F&&(this.search=_.substr(F),_=_.slice(0,F)),_&&(this.pathname=_),f[a]&&this.hostname&&!this.pathname&&(this.pathname=""),this},t.prototype.parseHost=function(e){var t=n.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)},e.exports=function(e,r){if(e&&e instanceof t)return e;var n=new t;return n.parse(e,r),n}},5276:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>oe});var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,i=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}(),o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),i))}};function a(e){return e&&"[object Function]"==={}.toString.call(e)}function s(e,t){if(1!==e.nodeType)return[];var r=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?r[t]:r}function u(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function l(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=s(e),r=t.overflow,n=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(r+i+n)?e:l(u(e))}function d(e){return e&&e.referenceNode?e.referenceNode:e}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function h(e){return 11===e?c:10===e?f:c||f}function p(e){if(!e)return document.documentElement;for(var t=h(10)?document.body:null,r=e.offsetParent||null;r===t&&e.nextElementSibling;)r=(e=e.nextElementSibling).offsetParent;var n=r&&r.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TH","TD","TABLE"].indexOf(r.nodeName)&&"static"===s(r,"position")?p(r):r:e?e.ownerDocument.documentElement:document.documentElement}function _(e){return null!==e.parentNode?_(e.parentNode):e}function m(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var r=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,n=r?e:t,i=r?t:e,o=document.createRange();o.setStart(n,0),o.setEnd(i,0);var a,s,u=o.commonAncestorContainer;if(e!==u&&t!==u||n.contains(i))return"BODY"===(s=(a=u).nodeName)||"HTML"!==s&&p(a.firstElementChild)!==a?p(u):u;var l=_(e);return l.host?m(l.host,t):m(e,_(t).host)}function g(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",r="top"===t?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var i=e.ownerDocument.documentElement,o=e.ownerDocument.scrollingElement||i;return o[r]}return e[r]}function b(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=g(t,"top"),i=g(t,"left"),o=r?-1:1;return e.top+=n*o,e.bottom+=n*o,e.left+=i*o,e.right+=i*o,e}function v(e,t){var r="x"===t?"Left":"Top",n="Left"===r?"Right":"Bottom";return parseFloat(e["border"+r+"Width"])+parseFloat(e["border"+n+"Width"])}function y(e,t,r,n){return Math.max(t["offset"+e],t["scroll"+e],r["client"+e],r["offset"+e],r["scroll"+e],h(10)?parseInt(r["offset"+e])+parseInt(n["margin"+("Height"===e?"Top":"Left")])+parseInt(n["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,r=e.documentElement,n=h(10)&&getComputedStyle(r);return{height:y("Height",t,r,n),width:y("Width",t,r,n)}}var k=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},C=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),E=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};function A(e){return x({},e,{right:e.left+e.width,bottom:e.top+e.height})}function D(e){var t={};try{if(h(10)){t=e.getBoundingClientRect();var r=g(e,"top"),n=g(e,"left");t.top+=r,t.left+=n,t.bottom+=r,t.right+=n}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?w(e.ownerDocument):{},a=o.width||e.clientWidth||i.width,u=o.height||e.clientHeight||i.height,l=e.offsetWidth-a,d=e.offsetHeight-u;if(l||d){var c=s(e);l-=v(c,"x"),d-=v(c,"y"),i.width-=l,i.height-=d}return A(i)}function T(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=h(10),i="HTML"===t.nodeName,o=D(e),a=D(t),u=l(e),d=s(t),c=parseFloat(d.borderTopWidth),f=parseFloat(d.borderLeftWidth);r&&i&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var p=A({top:o.top-a.top-c,left:o.left-a.left-f,width:o.width,height:o.height});if(p.marginTop=0,p.marginLeft=0,!n&&i){var _=parseFloat(d.marginTop),m=parseFloat(d.marginLeft);p.top-=c-_,p.bottom-=c-_,p.left-=f-m,p.right-=f-m,p.marginTop=_,p.marginLeft=m}return(n&&!r?t.contains(u):t===u&&"BODY"!==u.nodeName)&&(p=b(p,t)),p}function S(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=e.ownerDocument.documentElement,n=T(e,r),i=Math.max(r.clientWidth,window.innerWidth||0),o=Math.max(r.clientHeight,window.innerHeight||0),a=t?0:g(r),s=t?0:g(r,"left"),u={top:a-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:i,height:o};return A(u)}function q(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===s(e,"position"))return!0;var r=u(e);return!!r&&q(r)}function N(e){if(!e||!e.parentElement||h())return document.documentElement;for(var t=e.parentElement;t&&"none"===s(t,"transform");)t=t.parentElement;return t||document.documentElement}function F(e,t,r,n){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?N(e):m(e,d(t));if("viewport"===n)o=S(a,i);else{var s=void 0;"scrollParent"===n?"BODY"===(s=l(u(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===n?e.ownerDocument.documentElement:n;var c=T(s,a,i);if("HTML"!==s.nodeName||q(a))o=c;else{var f=w(e.ownerDocument),h=f.height,p=f.width;o.top+=c.top-c.marginTop,o.bottom=h+c.top,o.left+=c.left-c.marginLeft,o.right=p+c.left}}var _="number"==typeof(r=r||0);return o.left+=_?r:r.left||0,o.top+=_?r:r.top||0,o.right-=_?r:r.right||0,o.bottom-=_?r:r.bottom||0,o}function I(e){return e.width*e.height}function L(e,t,r,n,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=F(r,n,o,i),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(s).map((function(e){return x({key:e},s[e],{area:I(s[e])})})).sort((function(e,t){return t.area-e.area})),l=u.filter((function(e){var t=e.width,n=e.height;return t>=r.clientWidth&&n>=r.clientHeight})),d=l.length>0?l[0].key:u[0].key,c=e.split("-")[1];return d+(c?"-"+c:"")}function O(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=n?N(t):m(t,d(r));return T(r,i,n)}function z(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),r=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),n=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+n,height:e.offsetHeight+r}}function j(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function R(e,t,r){r=r.split("-")[0];var n=z(e),i={width:n.width,height:n.height},o=-1!==["right","left"].indexOf(r),a=o?"top":"left",s=o?"left":"top",u=o?"height":"width",l=o?"width":"height";return i[a]=t[a]+t[u]/2-n[u]/2,i[s]=r===s?t[s]-n[l]:t[j(s)],i}function M(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function P(e,t,r){return(void 0===r?e:e.slice(0,function(e,t,r){if(Array.prototype.findIndex)return e.findIndex((function(e){return e.name===r}));var n=M(e,(function(e){return e.name===r}));return e.indexOf(n)}(e,0,r))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var r=e.function||e.fn;e.enabled&&a(r)&&(t.offsets.popper=A(t.offsets.popper),t.offsets.reference=A(t.offsets.reference),t=r(t,e))})),t}function B(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=O(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=L(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=R(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=P(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function H(e,t){return e.some((function(e){var r=e.name;return e.enabled&&r===t}))}function U(e){for(var t=[!1,"ms","Webkit","Moz","O"],r=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<t.length;n++){var i=t[n],o=i?""+i+r:e;if(void 0!==document.body.style[o])return o}return null}function V(){return this.state.isDestroyed=!0,H(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[U("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function $(e){var t=e.ownerDocument;return t?t.defaultView:window}function W(e,t,r,n){var i="BODY"===e.nodeName,o=i?e.ownerDocument.defaultView:e;o.addEventListener(t,r,{passive:!0}),i||W(l(o.parentNode),t,r,n),n.push(o)}function Z(e,t,r,n){r.updateBound=n,$(e).addEventListener("resize",r.updateBound,{passive:!0});var i=l(e);return W(i,"scroll",r.updateBound,r.scrollParents),r.scrollElement=i,r.eventsEnabled=!0,r}function Q(){this.state.eventsEnabled||(this.state=Z(this.reference,this.options,this.state,this.scheduleUpdate))}function G(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,$(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function Y(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function J(e,t){Object.keys(t).forEach((function(r){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(r)&&Y(t[r])&&(n="px"),e.style[r]=t[r]+n}))}var K=n&&/Firefox/i.test(navigator.userAgent);function X(e,t,r){var n=M(e,(function(e){return e.name===t})),i=!!n&&e.some((function(e){return e.name===r&&e.enabled&&e.order<n.order}));if(!i){var o="`"+t+"`",a="`"+r+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var ee=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],te=ee.slice(3);function re(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=te.indexOf(e),n=te.slice(r+1).concat(te.slice(0,r));return t?n.reverse():n}var ne={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,r=t.split("-")[0],n=t.split("-")[1];if(n){var i=e.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(r),u=s?"left":"top",l=s?"width":"height",d={start:E({},u,o[u]),end:E({},u,o[u]+o[l]-a[l])};e.offsets.popper=x({},a,d[n])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var r,n=t.offset,i=e.placement,o=e.offsets,a=o.popper,s=o.reference,u=i.split("-")[0];return r=Y(+n)?[+n,0]:function(e,t,r,n){var i=[0,0],o=-1!==["right","left"].indexOf(n),a=e.split(/(\+|\-)/).map((function(e){return e.trim()})),s=a.indexOf(M(a,(function(e){return-1!==e.search(/,|\s/)})));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,l=-1!==s?[a.slice(0,s).concat([a[s].split(u)[0]]),[a[s].split(u)[1]].concat(a.slice(s+1))]:[a];return(l=l.map((function(e,n){var i=(1===n?!o:o)?"height":"width",a=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,r,n){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=r;break;case"%":case"%r":default:s=n}return A(s)[t]/100*o}return"vh"===a||"vw"===a?("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o:o}(e,i,t,r)}))}))).forEach((function(e,t){e.forEach((function(r,n){Y(r)&&(i[t]+=r*("-"===e[n-1]?-1:1))}))})),i}(n,a,s,u),"left"===u?(a.top+=r[0],a.left-=r[1]):"right"===u?(a.top+=r[0],a.left+=r[1]):"top"===u?(a.left+=r[0],a.top-=r[1]):"bottom"===u&&(a.left+=r[0],a.top+=r[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var r=t.boundariesElement||p(e.instance.popper);e.instance.reference===r&&(r=p(r));var n=U("transform"),i=e.instance.popper.style,o=i.top,a=i.left,s=i[n];i.top="",i.left="",i[n]="";var u=F(e.instance.popper,e.instance.reference,t.padding,r,e.positionFixed);i.top=o,i.left=a,i[n]=s,t.boundaries=u;var l=t.priority,d=e.offsets.popper,c={primary:function(e){var r=d[e];return d[e]<u[e]&&!t.escapeWithReference&&(r=Math.max(d[e],u[e])),E({},e,r)},secondary:function(e){var r="right"===e?"left":"top",n=d[r];return d[e]>u[e]&&!t.escapeWithReference&&(n=Math.min(d[r],u[e]-("right"===e?d.width:d.height))),E({},r,n)}};return l.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";d=x({},d,c[t](e))})),e.offsets.popper=d,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,r=t.popper,n=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",u=a?"left":"top",l=a?"width":"height";return r[s]<o(n[u])&&(e.offsets.popper[u]=o(n[u])-r[l]),r[u]>o(n[s])&&(e.offsets.popper[u]=o(n[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var r;if(!X(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,a=o.popper,u=o.reference,l=-1!==["left","right"].indexOf(i),d=l?"height":"width",c=l?"Top":"Left",f=c.toLowerCase(),h=l?"left":"top",p=l?"bottom":"right",_=z(n)[d];u[p]-_<a[f]&&(e.offsets.popper[f]-=a[f]-(u[p]-_)),u[f]+_>a[p]&&(e.offsets.popper[f]+=u[f]+_-a[p]),e.offsets.popper=A(e.offsets.popper);var m=u[f]+u[d]/2-_/2,g=s(e.instance.popper),b=parseFloat(g["margin"+c]),v=parseFloat(g["border"+c+"Width"]),y=m-e.offsets.popper[f]-b-v;return y=Math.max(Math.min(a[d]-_,y),0),e.arrowElement=n,e.offsets.arrow=(E(r={},f,Math.round(y)),E(r,h,""),r),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(H(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var r=F(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),n=e.placement.split("-")[0],i=j(n),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case"flip":a=[n,i];break;case"clockwise":a=re(n);break;case"counterclockwise":a=re(n,!0);break;default:a=t.behavior}return a.forEach((function(s,u){if(n!==s||a.length===u+1)return e;n=e.placement.split("-")[0],i=j(n);var l=e.offsets.popper,d=e.offsets.reference,c=Math.floor,f="left"===n&&c(l.right)>c(d.left)||"right"===n&&c(l.left)<c(d.right)||"top"===n&&c(l.bottom)>c(d.top)||"bottom"===n&&c(l.top)<c(d.bottom),h=c(l.left)<c(r.left),p=c(l.right)>c(r.right),_=c(l.top)<c(r.top),m=c(l.bottom)>c(r.bottom),g="left"===n&&h||"right"===n&&p||"top"===n&&_||"bottom"===n&&m,b=-1!==["top","bottom"].indexOf(n),v=!!t.flipVariations&&(b&&"start"===o&&h||b&&"end"===o&&p||!b&&"start"===o&&_||!b&&"end"===o&&m),y=!!t.flipVariationsByContent&&(b&&"start"===o&&p||b&&"end"===o&&h||!b&&"start"===o&&m||!b&&"end"===o&&_),w=v||y;(f||g||w)&&(e.flipped=!0,(f||g)&&(n=a[u+1]),w&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=n+(o?"-"+o:""),e.offsets.popper=x({},e.offsets.popper,R(e.instance.popper,e.offsets.reference,e.placement)),e=P(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,r=t.split("-")[0],n=e.offsets,i=n.popper,o=n.reference,a=-1!==["left","right"].indexOf(r),s=-1===["top","left"].indexOf(r);return i[a?"left":"top"]=o[r]-(s?i[a?"width":"height"]:0),e.placement=j(t),e.offsets.popper=A(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!X(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,r=M(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<r.top||t.left>r.right||t.top>r.bottom||t.right<r.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var r=t.x,n=t.y,i=e.offsets.popper,o=M(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a,s,u=void 0!==o?o:t.gpuAcceleration,l=p(e.instance.popper),d=D(l),c={position:i.position},f=function(e,t){var r=e.offsets,n=r.popper,i=r.reference,o=Math.round,a=Math.floor,s=function(e){return e},u=o(i.width),l=o(n.width),d=-1!==["left","right"].indexOf(e.placement),c=-1!==e.placement.indexOf("-"),f=t?d||c||u%2==l%2?o:a:s,h=t?o:s;return{left:f(u%2==1&&l%2==1&&!c&&t?n.left-1:n.left),top:h(n.top),bottom:h(n.bottom),right:f(n.right)}}(e,window.devicePixelRatio<2||!K),h="bottom"===r?"top":"bottom",_="right"===n?"left":"right",m=U("transform");if(s="bottom"===h?"HTML"===l.nodeName?-l.clientHeight+f.bottom:-d.height+f.bottom:f.top,a="right"===_?"HTML"===l.nodeName?-l.clientWidth+f.right:-d.width+f.right:f.left,u&&m)c[m]="translate3d("+a+"px, "+s+"px, 0)",c[h]=0,c[_]=0,c.willChange="transform";else{var g="bottom"===h?-1:1,b="right"===_?-1:1;c[h]=s*g,c[_]=a*b,c.willChange=h+", "+_}var v={"x-placement":e.placement};return e.attributes=x({},v,e.attributes),e.styles=x({},c,e.styles),e.arrowStyles=x({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,r;return J(e.instance.popper,e.styles),t=e.instance.popper,r=e.attributes,Object.keys(r).forEach((function(e){!1!==r[e]?t.setAttribute(e,r[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&J(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,r,n,i){var o=O(i,t,e,r.positionFixed),a=L(r.placement,o,t,e,r.modifiers.flip.boundariesElement,r.modifiers.flip.padding);return t.setAttribute("x-placement",a),J(t,{position:r.positionFixed?"fixed":"absolute"}),r},gpuAcceleration:void 0}}},ie=function(){function e(t,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};k(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=o(this.update.bind(this)),this.options=x({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=r&&r.jquery?r[0]:r,this.options.modifiers={},Object.keys(x({},e.Defaults.modifiers,i.modifiers)).forEach((function(t){n.options.modifiers[t]=x({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return x({name:e},n.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&a(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return C(e,[{key:"update",value:function(){return B.call(this)}},{key:"destroy",value:function(){return V.call(this)}},{key:"enableEventListeners",value:function(){return Q.call(this)}},{key:"disableEventListeners",value:function(){return G.call(this)}}]),e}();ie.Utils=("undefined"!=typeof window?window:r.g).PopperUtils,ie.placements=ee,ie.Defaults=ne;const oe=ie},5049:(e,t,r)=>{"use strict";var n=Object.prototype.hasOwnProperty;function i(e,t){return Array.isArray(e)?function(e,t){for(var r,n="",o="",a=Array.isArray(t),s=0;s<e.length;s++)(r=i(e[s]))&&(a&&t[s]&&(r=u(r)),n=n+o+r,o=" ");return n}(e,t):e&&"object"==typeof e?function(e){var t="",r="";for(var i in e)i&&e[i]&&n.call(e,i)&&(t=t+r+i,r=" ");return t}(e):e||""}function o(e){if(!e)return"";if("object"==typeof e){var t="";for(var r in e)n.call(e,r)&&(t=t+r+":"+e[r]+";");return t}return e+""}function a(e,t,r,n){if(!1===t||null==t||!t&&("class"===e||"style"===e))return"";if(!0===t)return" "+(n?e:e+'="'+e+'"');var i=typeof t;return"object"!==i&&"function"!==i||"function"!=typeof t.toJSON||(t=t.toJSON()),"string"==typeof t||(t=JSON.stringify(t),r||-1===t.indexOf('"'))?(r&&(t=u(t))," "+e+'="'+t+'"'):" "+e+"='"+t.replace(/'/g,"&#39;")+"'"}t.merge=function e(t,r){if(1===arguments.length){for(var n=t[0],i=1;i<t.length;i++)n=e(n,t[i]);return n}for(var a in r)if("class"===a){var s=t[a]||[];t[a]=(Array.isArray(s)?s:[s]).concat(r[a]||[])}else if("style"===a){s=(s=o(t[a]))&&";"!==s[s.length-1]?s+";":s;var u=o(r[a]);u=u&&";"!==u[u.length-1]?u+";":u,t[a]=s+u}else t[a]=r[a];return t},t.classes=i,t.style=o,t.attr=a,t.attrs=function(e,t){var r="";for(var s in e)if(n.call(e,s)){var u=e[s];if("class"===s){r=a(s,u=i(u),!1,t)+r;continue}"style"===s&&(u=o(u)),r+=a(s,u,!1,t)}return r};var s=/["&<>]/;function u(e){var t=""+e,r=s.exec(t);if(!r)return e;var n,i,o,a="";for(n=r.index,i=0;n<t.length;n++){switch(t.charCodeAt(n)){case 34:o="&quot;";break;case 38:o="&amp;";break;case 60:o="&lt;";break;case 62:o="&gt;";break;default:continue}i!==n&&(a+=t.substring(i,n)),i=n+1,a+=o}return i!==n?a+t.substring(i,n):a}t.escape=u,t.rethrow=function e(t,n,i,o){if(!(t instanceof Error))throw t;if(!("undefined"==typeof window&&n||o))throw t.message+=" on line "+i,t;try{o=o||r(2993).readFileSync(n,"utf8")}catch(r){e(t,null,i)}var a=3,s=o.split("\n"),u=Math.max(i-a,0),l=Math.min(s.length,i+a);a=s.slice(u,l).map((function(e,t){var r=t+u+1;return(r==i?"  > ":"    ")+r+"| "+e})).join("\n"),t.path=n;try{t.message=(n||"Pug")+":"+i+"\n"+a+"\n\n"+t.message}catch(e){}throw t}},9577:(e,t,r)=>{"use strict";r.r(t),r.d(t,{ucs2decode:()=>h,ucs2encode:()=>p,decode:()=>g,encode:()=>b,toASCII:()=>y,toUnicode:()=>v,default:()=>w});const n=2147483647,i=36,o=/^xn--/,a=/[^\0-\x7E]/,s=/[\x2E\u3002\uFF0E\uFF61]/g,u={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},l=Math.floor,d=String.fromCharCode;function c(e){throw new RangeError(u[e])}function f(e,t){const r=e.split("@");let n="";r.length>1&&(n=r[0]+"@",e=r[1]);const i=function(e,t){const r=[];let n=e.length;for(;n--;)r[n]=t(e[n]);return r}((e=e.replace(s,".")).split("."),t).join(".");return n+i}function h(e){const t=[];let r=0;const n=e.length;for(;r<n;){const i=e.charCodeAt(r++);if(i>=55296&&i<=56319&&r<n){const n=e.charCodeAt(r++);56320==(64512&n)?t.push(((1023&i)<<10)+(1023&n)+65536):(t.push(i),r--)}else t.push(i)}return t}const p=e=>String.fromCodePoint(...e),_=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},m=function(e,t,r){let n=0;for(e=r?l(e/700):e>>1,e+=l(e/t);e>455;n+=i)e=l(e/35);return l(n+36*e/(e+38))},g=function(e){const t=[],r=e.length;let o=0,a=128,s=72,u=e.lastIndexOf("-");u<0&&(u=0);for(let r=0;r<u;++r)e.charCodeAt(r)>=128&&c("not-basic"),t.push(e.charCodeAt(r));for(let f=u>0?u+1:0;f<r;){let u=o;for(let t=1,a=i;;a+=i){f>=r&&c("invalid-input");const u=(d=e.charCodeAt(f++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:i;(u>=i||u>l((n-o)/t))&&c("overflow"),o+=u*t;const h=a<=s?1:a>=s+26?26:a-s;if(u<h)break;const p=i-h;t>l(n/p)&&c("overflow"),t*=p}const h=t.length+1;s=m(o-u,h,0==u),l(o/h)>n-a&&c("overflow"),a+=l(o/h),o%=h,t.splice(o++,0,a)}var d;return String.fromCodePoint(...t)},b=function(e){const t=[];let r=(e=h(e)).length,o=128,a=0,s=72;for(const r of e)r<128&&t.push(d(r));let u=t.length,f=u;for(u&&t.push("-");f<r;){let r=n;for(const t of e)t>=o&&t<r&&(r=t);const h=f+1;r-o>l((n-a)/h)&&c("overflow"),a+=(r-o)*h,o=r;for(const r of e)if(r<o&&++a>n&&c("overflow"),r==o){let e=a;for(let r=i;;r+=i){const n=r<=s?1:r>=s+26?26:r-s;if(e<n)break;const o=e-n,a=i-n;t.push(d(_(n+o%a,0))),e=l(o/a)}t.push(d(_(e,0))),s=m(a,h,f==u),a=0,++f}++a,++o}return t.join("")},v=function(e){return f(e,(function(e){return o.test(e)?g(e.slice(4).toLowerCase()):e}))},y=function(e){return f(e,(function(e){return a.test(e)?"xn--"+b(e):e}))},w={version:"2.1.0",ucs2:{decode:h,encode:p},decode:g,encode:b,toASCII:y,toUnicode:v}},7573:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(){var e={base:"https://twemoji.maxcdn.com/v/13.0.1/",ext:".png",size:"72x72",className:"emoji",convert:{fromCodePoint:function(e){var t="string"==typeof e?parseInt(e,16):e;return t<65536?s(t):s(55296+((t-=65536)>>10),56320+(1023&t))},toCodePoint:g},onerror:function(){this.parentNode&&this.parentNode.replaceChild(u(this.alt,!1),this)},parse:function(t,r){return r&&"function"!=typeof r||(r={callback:r}),("string"==typeof t?h:f)(t,{callback:r.callback||l,attributes:"function"==typeof r.attributes?r.attributes:_,base:"string"==typeof r.base?r.base:e.base,ext:r.ext||e.ext,size:r.folder||(n=r.size||e.size,"number"==typeof n?n+"x"+n:n),className:r.className||e.className,onerror:r.onerror||e.onerror});var n},replace:m,test:function(e){r.lastIndex=0;var t=r.test(e);return r.lastIndex=0,t}},t={"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#39;",'"':"&quot;"},r=/(?:\ud83d\udc68\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc68\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc68\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1|\ud83d\udc6b\ud83c[\udffb-\udfff]|\ud83d\udc6c\ud83c[\udffb-\udfff]|\ud83d\udc6d\ud83c[\udffb-\udfff]|\ud83d[\udc6b-\udc6d])|(?:\ud83d[\udc68\udc69]|\ud83e\uddd1)(?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf7c\udf84\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92]|\ud83e[\uddaf-\uddb3\uddbc\uddbd])|(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75]|\u26f9)((?:\ud83c[\udffb-\udfff]|\ufe0f)\u200d[\u2640\u2642]\ufe0f)|(?:\ud83c[\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc70\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6]|\ud83e[\udd26\udd35\udd37-\udd39\udd3d\udd3e\uddb8\uddb9\uddcd-\uddcf\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|(?:\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc15\u200d\ud83e\uddba|\ud83d\udc3b\u200d\u2744\ufe0f|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f|\ud83d\udc08\u200d\u2b1b)|[#*0-9]\ufe0f?\u20e3|(?:[©®\u2122\u265f]\ufe0f)|(?:\ud83c[\udc04\udd70\udd71\udd7e\udd7f\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u203c\u2049\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2697\u2699\u269b\u269c\u26a0\u26a1\u26a7\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|(?:\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd0c\udd0f\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\udd77\uddb5\uddb6\uddb8\uddb9\uddbb\uddcd-\uddcf\uddd1-\udddd]|[\u270a\u270b]))(?:\ud83c[\udffb-\udfff])?|(?:\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\uded5-\uded7\udeeb\udeec\udef4-\udefc\udfe0-\udfeb]|\ud83e[\udd0d\udd0e\udd10-\udd17\udd1d\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd3f-\udd45\udd47-\udd76\udd78\udd7a-\uddb4\uddb7\uddba\uddbc-\uddcb\uddd0\uddde-\uddff\ude70-\ude74\ude78-\ude7a\ude80-\ude86\ude90-\udea8\udeb0-\udeb6\udec0-\udec2\uded0-\uded6]|[\u23e9-\u23ec\u23f0\u23f3\u267e\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a])|\ufe0f/g,n=/\uFE0F/g,i=String.fromCharCode(8205),o=/[&<>'"]/g,a=/^(?:iframe|noframes|noscript|script|select|style|textarea)$/,s=String.fromCharCode;return e;function u(e,t){return document.createTextNode(t?e.replace(n,""):e)}function l(e,t){return"".concat(t.base,t.size,"/",e,t.ext)}function d(e,t){for(var r,n,i=e.childNodes,o=i.length;o--;)3===(n=(r=i[o]).nodeType)?t.push(r):1!==n||"ownerSVGElement"in r||a.test(r.nodeName.toLowerCase())||d(r,t);return t}function c(e){return g(e.indexOf(i)<0?e.replace(n,""):e)}function f(e,t){for(var n,i,o,a,s,l,f,h,p,_,m,g,b,v=d(e,[]),y=v.length;y--;){for(o=!1,a=document.createDocumentFragment(),l=(s=v[y]).nodeValue,h=0;f=r.exec(l);){if((p=f.index)!==h&&a.appendChild(u(l.slice(h,p),!0)),g=c(m=f[0]),h=p+m.length,b=t.callback(g,t),g&&b){for(i in(_=new Image).onerror=t.onerror,_.setAttribute("draggable","false"),n=t.attributes(m,g))n.hasOwnProperty(i)&&0!==i.indexOf("on")&&!_.hasAttribute(i)&&_.setAttribute(i,n[i]);_.className=t.className,_.alt=m,_.src=b,o=!0,a.appendChild(_)}_||a.appendChild(u(m,!1)),_=null}o&&(h<l.length&&a.appendChild(u(l.slice(h),!0)),s.parentNode.replaceChild(a,s))}return e}function h(e,t){return m(e,(function(e){var r,n,i=e,a=c(e),s=t.callback(a,t);if(a&&s){for(n in i="<img ".concat('class="',t.className,'" ','draggable="false" ','alt="',e,'"',' src="',s,'"'),r=t.attributes(e,a))r.hasOwnProperty(n)&&0!==n.indexOf("on")&&-1===i.indexOf(" "+n+"=")&&(i=i.concat(" ",n,'="',r[n].replace(o,p),'"'));i=i.concat("/>")}return i}))}function p(e){return t[e]}function _(){return null}function m(e,t){return String(e).replace(r,t)}function g(e,t){for(var r=[],n=0,i=0,o=0;o<e.length;)n=e.charCodeAt(o++),i?(r.push((65536+(i-55296<<10)+(n-56320)).toString(16)),i=0):55296<=n&&n<=56319?i=n:r.push(n.toString(16));return r.join(t||"-")}}()},8073:e=>{e.exports=/[\0-\x1F\x7F-\x9F]/},6497:e=>{e.exports=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/},819:e=>{e.exports=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/},6390:e=>{e.exports=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/},8059:(e,t,r)=>{"use strict";t.Any=r(4604),t.Cc=r(8073),t.Cf=r(6497),t.P=r(819),t.Z=r(6390)},4604:e=>{e.exports=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/},864:(e,t,r)=>{"use strict";r(3380),r(7527);const n=r(6298);document.body.onload=n.MessageController.init},4699:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MesgPrinterConstants=void 0;class r{}t.MesgPrinterConstants=r,r.PRINTER_READY_EVENT_NAME="printerReady"},6298:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MessageController=void 0;const i=n(r(3609)),o=n(r(9239)),a=r(1794),s=n(r(6912)),u=n(r(7573)),l=n(r(9735)),d=r(4699);class c{constructor(e){e.addEventListener("message",(e=>{this.manageMessage(e)})),this.mesgQueue=i.default("#mesg-queue"),this.markdown=new s.default({html:!0,xhtmlOut:!0,breaks:!0,typographer:!0}),this.markdown.use(l.default),this.markdown.renderer.rules.emoji=(e,t)=>u.default.parse(e[t].content,c.EMOJI_PARAMS)}static get instance(){return null==c.inst&&(c.inst=new c(window)),c.inst}static init(){fetch(`https://${c.PARENT_RESOURCE_NAME}/${d.MesgPrinterConstants.PRINTER_READY_EVENT_NAME}`,{method:"POST",headers:{"Content-Type":"application/json; charset=UTF-8"},body:JSON.stringify({code:200})}).then((()=>{c.inst=c.instance})).catch(console.error)}manageMessage(e){switch(e.data.type){case"AddMessage":this.addMessage(e.data.message,e.data.params);break;case"AddError":this.addError(e.data.message,e.data.params);break;case"AddWarn":this.addWarn(e.data.message,e.data.params);break;default:throw new Error(`${e.data.type} is not a valid event`)}}addMessage(e,t){return this.addNewMessage(e,"text-light",t)}addError(e,t){return this.addNewMessage(e,"text-danger font-weight-bold",t)}addWarn(e,t){return this.addNewMessage(e,"text-warning font-weight-bold",t)}addNewMessage(e,t,{ressourceName:r,ressourceColor:n,holdTime:s}){let u=i.default(o.default({id:`${r}_${Date.now()}`,ressourceName:r,rgbHex:a.Tools.rgbToHex(n[0],n[1],n[2]),msgClass:t,msg:this.markdown.render(e),msgTextColorClass:a.Tools.getContrastingColor(n,"badge-dark","badge-light")})).one("shown.bs.collapse",(()=>{u.one("hidden.bs.collapse",(()=>{u.collapse("dispose"),u.remove()}))})).prependTo(this.mesgQueue).collapse("hide");setTimeout((()=>{u.collapse("hide")}),s+c.COLLAPSE_TIME),setTimeout((()=>{u.collapse("show")}),1)}}t.MessageController=c,c.COLLAPSE_TIME=350,c.EMOJI_PARAMS={folder:"svg",ext:".svg"},c.PARENT_RESOURCE_NAME=GetParentResourceName()},1794:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tools=void 0;class r{static getContrastingColor(e,t,n){let i,[o,a,s]=e;return o/=255,s/=255,a/=255,o=o<=.03928?o/12.92:Math.pow((o+.055)/1.055,2.4),a=a<=.03928?a/12.92:Math.pow((a+.055)/1.055,2.4),s=s<=.03928?s/12.92:Math.pow((s+.055)/1.055,2.4),i=.2126*o+.7152*a+.0722*s,i<r.THRESHOLD?t:n}static rgbToHex(e,t,r){return((1<<24)+(e<<16)+(t<<8)+r).toString(16).slice(1)}}t.Tools=r,r.THRESHOLD=.43},3609:e=>{"use strict";e.exports=jQuery},2993:()=>{}},t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(864)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,